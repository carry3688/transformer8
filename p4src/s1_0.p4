/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

/*
 * Standard ethernet header
 */
header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

const bit<16> P4CALC_ETYPE = 0x1234;
const bit<8>  P4CALC_P     = 0x50;   // 'P'
const bit<8>  P4CALC_4     = 0x34;   // '4'
const bit<8>  P4CALC_VER   = 0x01;   // v0.1

const bit<32> wq_0_0 = 0xffff2d7e;
const bit<32> wq_0_1 = 0xffffbb19;
const bit<32> wq_0_2 = 0x00000185;
const bit<32> wq_1_0 = 0xffffad93;
const bit<32> wq_1_1 = 0xffff8cfe;
const bit<32> wq_1_2 = 0xffff891f;
const bit<32> wq_2_0 = 0xfffff077;
const bit<32> wq_2_1 = 0x000020fd;
const bit<32> wq_2_2 = 0x0000d62d;
const bit<32> wk_0_0 = 0xffff220c;
const bit<32> wk_0_1 = 0xffff4097;
const bit<32> wk_0_2 = 0xffffcc32;
const bit<32> wk_1_0 = 0x0000c38f;
const bit<32> wk_1_1 = 0xffff3e08;
const bit<32> wk_1_2 = 0xffff0b60;
const bit<32> wk_2_0 = 0xffff4168;
const bit<32> wk_2_1 = 0x000021f8;
const bit<32> wk_2_2 = 0x00008a42;
const bit<32> wv_0_0 = 0xffff79e7;
const bit<32> wv_0_1 = 0x00008b75;
const bit<32> wv_0_2 = 0x00004e2b;
const bit<32> wv_1_0 = 0x0000d979;
const bit<32> wv_1_1 = 0x000009b9;
const bit<32> wv_1_2 = 0x0000b6aa;
const bit<32> wv_2_0 = 0xffff8f5e;
const bit<32> wv_2_1 = 0x0000d155;
const bit<32> wv_2_2 = 0x00003eec;

const bit<32> replication = 0x00;

const bit<16> ETHERTYPE_PTP  = 0x88F7;

header ptp_t {
    bit<4>   transport_specifics;
    bit<4>   message_type;
    bit<4>   reserved1;
    bit<4>   version;
    bit<16>  message_legth;
    bit<8>   domain_number;
    bit<8>   reserved2;
    bit<16>  flagfiled;
    bit<64>  correction_field;
    bit<32>  reserved3;
    bit<80>  source_port_identity;
    bit<16>  sequence_id;
    bit<8>   control_field;
    bit<8>   log_message_interval;
}

header p4calc_t {
    bit<8> p;
    bit<8> four;
    bit<8> ver;

    bit<32> s1_replication;
    bit<32> s4_replication;
    bit<32> msg_index;
}

header s0_output0_calc_t {
    bit<16> s0_output_0_0;
    bit<16> s0_output_0_1;
    bit<16> s0_output_0_2;
    bit<16> s0_output_0_3;
    bit<16> s0_output_0_4;
    bit<16> s0_output_0_5;
    bit<16> s0_output_1_0;
    bit<16> s0_output_1_1;
    bit<16> s0_output_1_2;
    bit<16> s0_output_1_3;
    bit<16> s0_output_1_4;
    bit<16> s0_output_1_5;
    bit<16> s0_output_2_0;
    bit<16> s0_output_2_1;
    bit<16> s0_output_2_2;
    bit<16> s0_output_2_3;
    bit<16> s0_output_2_4;
    bit<16> s0_output_2_5;
    bit<16> s0_output_3_0;
    bit<16> s0_output_3_1;
    bit<16> s0_output_3_2;
    bit<16> s0_output_3_3;
    bit<16> s0_output_3_4;
    bit<16> s0_output_3_5;
    bit<16> s0_output_4_0;
    bit<16> s0_output_4_1;
    bit<16> s0_output_4_2;
    bit<16> s0_output_4_3;
    bit<16> s0_output_4_4;
    bit<16> s0_output_4_5;
    bit<16> s0_output_5_0;
    bit<16> s0_output_5_1;
    bit<16> s0_output_5_2;
    bit<16> s0_output_5_3;
    bit<16> s0_output_5_4;
    bit<16> s0_output_5_5;
    bit<16> s0_output_6_0;
    bit<16> s0_output_6_1;
    bit<16> s0_output_6_2;
    bit<16> s0_output_6_3;
    bit<16> s0_output_6_4;
    bit<16> s0_output_6_5;
    bit<16> s0_output_7_0;
    bit<16> s0_output_7_1;
    bit<16> s0_output_7_2;
    bit<16> s0_output_7_3;
    bit<16> s0_output_7_4;
    bit<16> s0_output_7_5;
}

header s1_output0_calc_t {
    bit<16> s1_output_0_0;
    bit<16> s1_output_0_1;
    bit<16> s1_output_0_2;
    bit<16> s1_output_0_3;
    bit<16> s1_output_0_4;
    bit<16> s1_output_0_5;
    bit<16> s1_output_1_0;
    bit<16> s1_output_1_1;
    bit<16> s1_output_1_2;
    bit<16> s1_output_1_3;
    bit<16> s1_output_1_4;
    bit<16> s1_output_1_5;
    bit<16> s1_output_2_0;
    bit<16> s1_output_2_1;
    bit<16> s1_output_2_2;
    bit<16> s1_output_2_3;
    bit<16> s1_output_2_4;
    bit<16> s1_output_2_5;
    bit<16> s1_output_3_0;
    bit<16> s1_output_3_1;
    bit<16> s1_output_3_2;
    bit<16> s1_output_3_3;
    bit<16> s1_output_3_4;
    bit<16> s1_output_3_5;
    bit<16> s1_output_4_0;
    bit<16> s1_output_4_1;
    bit<16> s1_output_4_2;
    bit<16> s1_output_4_3;
    bit<16> s1_output_4_4;
    bit<16> s1_output_4_5;
    bit<16> s1_output_5_0;
    bit<16> s1_output_5_1;
    bit<16> s1_output_5_2;
    bit<16> s1_output_5_3;
    bit<16> s1_output_5_4;
    bit<16> s1_output_5_5;
    bit<16> s1_output_6_0;
    bit<16> s1_output_6_1;
    bit<16> s1_output_6_2;
    bit<16> s1_output_6_3;
    bit<16> s1_output_6_4;
    bit<16> s1_output_6_5;
    bit<16> s1_output_7_0;
    bit<16> s1_output_7_1;
    bit<16> s1_output_7_2;
    bit<16> s1_output_7_3;
    bit<16> s1_output_7_4;
    bit<16> s1_output_7_5;
}

header s7_output0_calc_t {
    bit<16> s7_before_sigmoid;
    bit<16> s7_output;
}

struct headers {
    ethernet_t   ethernet;
    ptp_t       ptp;
    p4calc_t     p4calc;
    s0_output0_calc_t s0_output0_calc;
    s1_output0_calc_t s1_output0_calc;
    s7_output0_calc_t s7_output0_calc;
}

struct ingress_metadata_t {
}

struct metadata {
    bit<32> softmax_reciprocal_0;
    bit<32> softmax_reciprocal_1;
    bit<32> softmax_reciprocal_2;
    bit<32> softmax_reciprocal_3;
    bit<32> softmax_reciprocal_4;
    bit<32> softmax_reciprocal_5;
    bit<32> softmax_reciprocal_6;
    bit<32> softmax_reciprocal_7;

    bit<32> softmax_sum_0;
    bit<32> softmax_sum_1;
    bit<32> softmax_sum_2;
    bit<32> softmax_sum_3;
    bit<32> softmax_sum_4;
    bit<32> softmax_sum_5;
    bit<32> softmax_sum_6;
    bit<32> softmax_sum_7;

    bit<32> q_mul_kt_0_0;
    bit<32> q_mul_kt_0_1;
    bit<32> q_mul_kt_0_2;
    bit<32> q_mul_kt_0_3;
    bit<32> q_mul_kt_0_4;
    bit<32> q_mul_kt_0_5;
    bit<32> q_mul_kt_0_6;
    bit<32> q_mul_kt_0_7;
    bit<32> q_mul_kt_1_0;
    bit<32> q_mul_kt_1_1;
    bit<32> q_mul_kt_1_2;
    bit<32> q_mul_kt_1_3;
    bit<32> q_mul_kt_1_4;
    bit<32> q_mul_kt_1_5;
    bit<32> q_mul_kt_1_6;
    bit<32> q_mul_kt_1_7;
    bit<32> q_mul_kt_2_0;
    bit<32> q_mul_kt_2_1;
    bit<32> q_mul_kt_2_2;
    bit<32> q_mul_kt_2_3;
    bit<32> q_mul_kt_2_4;
    bit<32> q_mul_kt_2_5;
    bit<32> q_mul_kt_2_6;
    bit<32> q_mul_kt_2_7;
    bit<32> q_mul_kt_3_0;
    bit<32> q_mul_kt_3_1;
    bit<32> q_mul_kt_3_2;
    bit<32> q_mul_kt_3_3;
    bit<32> q_mul_kt_3_4;
    bit<32> q_mul_kt_3_5;
    bit<32> q_mul_kt_3_6;
    bit<32> q_mul_kt_3_7;
    bit<32> q_mul_kt_4_0;
    bit<32> q_mul_kt_4_1;
    bit<32> q_mul_kt_4_2;
    bit<32> q_mul_kt_4_3;
    bit<32> q_mul_kt_4_4;
    bit<32> q_mul_kt_4_5;
    bit<32> q_mul_kt_4_6;
    bit<32> q_mul_kt_4_7;
    bit<32> q_mul_kt_5_0;
    bit<32> q_mul_kt_5_1;
    bit<32> q_mul_kt_5_2;
    bit<32> q_mul_kt_5_3;
    bit<32> q_mul_kt_5_4;
    bit<32> q_mul_kt_5_5;
    bit<32> q_mul_kt_5_6;
    bit<32> q_mul_kt_5_7;
    bit<32> q_mul_kt_6_0;
    bit<32> q_mul_kt_6_1;
    bit<32> q_mul_kt_6_2;
    bit<32> q_mul_kt_6_3;
    bit<32> q_mul_kt_6_4;
    bit<32> q_mul_kt_6_5;
    bit<32> q_mul_kt_6_6;
    bit<32> q_mul_kt_6_7;
    bit<32> q_mul_kt_7_0;
    bit<32> q_mul_kt_7_1;
    bit<32> q_mul_kt_7_2;
    bit<32> q_mul_kt_7_3;
    bit<32> q_mul_kt_7_4;
    bit<32> q_mul_kt_7_5;
    bit<32> q_mul_kt_7_6;
    bit<32> q_mul_kt_7_7;
}

/*************************************************************************
 ***********************  P A R S E R  ***********************************
 *************************************************************************/
parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            ETHERTYPE_PTP : parse_ptp;
            P4CALC_ETYPE : check_p4calc;
            default      : accept;
        }
    }

    state parse_ptp {
        packet.extract(hdr.ptp);
        transition check_p4calc;
    }

    state check_p4calc {
        transition select(packet.lookahead<p4calc_t>().p,
        packet.lookahead<p4calc_t>().four,
        packet.lookahead<p4calc_t>().ver) {
            (P4CALC_P, P4CALC_4, P4CALC_VER) : parse_p4calc;
            default                          : accept;
        }
    }

    state parse_p4calc {
        packet.extract(hdr.p4calc);
        transition parse_s0_output0_calc;
    }

    state parse_s0_output0_calc {
        packet.extract(hdr.s0_output0_calc);
        transition parse_s1_output0_calc;
    }

    state parse_s1_output0_calc {
        packet.extract(hdr.s1_output0_calc);
        transition parse_s7_output0_calc;
    }

    state parse_s7_output0_calc {
        packet.extract(hdr.s7_output0_calc);
        transition accept;
    }
}

/*************************************************************************
 ************   C H E C K S U M    V E R I F I C A T I O N   *************
 *************************************************************************/
control MyVerifyChecksum(inout headers hdr,
                         inout metadata meta) {
    apply { }
}

/*************************************************************************
 **************  I N G R E S S   P R O C E S S I N G   *******************
 *************************************************************************/
control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    //register<bit<32>>(96) q;
    //register<bit<32>>(96) k;
    register<bit<32>>(24) v_value;
    register<bit<16>>(64) q_mul16_kt;
    register<bit<32>>(64) softmax_value;
    register<bit<32>>(1024) exp_result;//256*4，取16位里面的10位来求存储结果，这里不采用table的原因是因为我需要反复查询，如果使用table就要存储很多相同的数据，浪费空间
    
    // 计算q*k_t
    action calc_qk(){
        // 双头自注意力机制，输入 8*3     
        bit<16> x_0_0 = hdr.s0_output0_calc.s0_output_0_0;
        bit<16> x_0_1 = hdr.s0_output0_calc.s0_output_0_1;
        bit<16> x_0_2 = hdr.s0_output0_calc.s0_output_0_2;
        bit<16> x_1_0 = hdr.s0_output0_calc.s0_output_1_0;
        bit<16> x_1_1 = hdr.s0_output0_calc.s0_output_1_1;
        bit<16> x_1_2 = hdr.s0_output0_calc.s0_output_1_2;
        bit<16> x_2_0 = hdr.s0_output0_calc.s0_output_2_0;
        bit<16> x_2_1 = hdr.s0_output0_calc.s0_output_2_1;
        bit<16> x_2_2 = hdr.s0_output0_calc.s0_output_2_2;
        bit<16> x_3_0 = hdr.s0_output0_calc.s0_output_3_0;
        bit<16> x_3_1 = hdr.s0_output0_calc.s0_output_3_1;
        bit<16> x_3_2 = hdr.s0_output0_calc.s0_output_3_2;
        bit<16> x_4_0 = hdr.s0_output0_calc.s0_output_4_0;
        bit<16> x_4_1 = hdr.s0_output0_calc.s0_output_4_1;
        bit<16> x_4_2 = hdr.s0_output0_calc.s0_output_4_2;
        bit<16> x_5_0 = hdr.s0_output0_calc.s0_output_5_0;
        bit<16> x_5_1 = hdr.s0_output0_calc.s0_output_5_1;
        bit<16> x_5_2 = hdr.s0_output0_calc.s0_output_5_2;
        bit<16> x_6_0 = hdr.s0_output0_calc.s0_output_6_0;
        bit<16> x_6_1 = hdr.s0_output0_calc.s0_output_6_1;
        bit<16> x_6_2 = hdr.s0_output0_calc.s0_output_6_2;
        bit<16> x_7_0 = hdr.s0_output0_calc.s0_output_7_0;
        bit<16> x_7_1 = hdr.s0_output0_calc.s0_output_7_1;
        bit<16> x_7_2 = hdr.s0_output0_calc.s0_output_7_2;

        // 符号扩展，16扩到32
        bit<32> x32_0_0 = (bit<32>) x_0_0 | (( x_0_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_0_1 = (bit<32>) x_0_1 | (( x_0_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_0_2 = (bit<32>) x_0_2 | (( x_0_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_1_0 = (bit<32>) x_1_0 | (( x_1_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_1_1 = (bit<32>) x_1_1 | (( x_1_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_1_2 = (bit<32>) x_1_2 | (( x_1_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_2_0 = (bit<32>) x_2_0 | (( x_2_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_2_1 = (bit<32>) x_2_1 | (( x_2_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_2_2 = (bit<32>) x_2_2 | (( x_2_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_3_0 = (bit<32>) x_3_0 | (( x_3_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_3_1 = (bit<32>) x_3_1 | (( x_3_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_3_2 = (bit<32>) x_3_2 | (( x_3_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_4_0 = (bit<32>) x_4_0 | (( x_4_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_4_1 = (bit<32>) x_4_1 | (( x_4_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_4_2 = (bit<32>) x_4_2 | (( x_4_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_5_0 = (bit<32>) x_5_0 | (( x_5_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_5_1 = (bit<32>) x_5_1 | (( x_5_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_5_2 = (bit<32>) x_5_2 | (( x_5_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_6_0 = (bit<32>) x_6_0 | (( x_6_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_6_1 = (bit<32>) x_6_1 | (( x_6_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_6_2 = (bit<32>) x_6_2 | (( x_6_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_7_0 = (bit<32>) x_7_0 | (( x_7_0 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_7_1 = (bit<32>) x_7_1 | (( x_7_1 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);
        bit<32> x32_7_2 = (bit<32>) x_7_2 | (( x_7_2 & 0x8000) != 0 ? 32w0xFFFF0000 : 32w0x00000000);

        //计算q
        bit<16> q_0_0 = (x32_0_0 * wq_0_0 + x32_0_1 * wq_1_0 + x32_0_2 * wq_2_0)[23:8];
        bit<16> q_0_1 = (x32_0_0 * wq_0_1 + x32_0_1 * wq_1_1 + x32_0_2 * wq_2_1)[23:8];
        bit<16> q_0_2 = (x32_0_0 * wq_0_2 + x32_0_1 * wq_1_2 + x32_0_2 * wq_2_2)[23:8];
        bit<16> q_1_0 = (x32_1_0 * wq_0_0 + x32_1_1 * wq_1_0 + x32_1_2 * wq_2_0)[23:8];
        bit<16> q_1_1 = (x32_1_0 * wq_0_1 + x32_1_1 * wq_1_1 + x32_1_2 * wq_2_1)[23:8];
        bit<16> q_1_2 = (x32_1_0 * wq_0_2 + x32_1_1 * wq_1_2 + x32_1_2 * wq_2_2)[23:8];
        bit<16> q_2_0 = (x32_2_0 * wq_0_0 + x32_2_1 * wq_1_0 + x32_2_2 * wq_2_0)[23:8];
        bit<16> q_2_1 = (x32_2_0 * wq_0_1 + x32_2_1 * wq_1_1 + x32_2_2 * wq_2_1)[23:8];
        bit<16> q_2_2 = (x32_2_0 * wq_0_2 + x32_2_1 * wq_1_2 + x32_2_2 * wq_2_2)[23:8];
        bit<16> q_3_0 = (x32_3_0 * wq_0_0 + x32_3_1 * wq_1_0 + x32_3_2 * wq_2_0)[23:8];
        bit<16> q_3_1 = (x32_3_0 * wq_0_1 + x32_3_1 * wq_1_1 + x32_3_2 * wq_2_1)[23:8];
        bit<16> q_3_2 = (x32_3_0 * wq_0_2 + x32_3_1 * wq_1_2 + x32_3_2 * wq_2_2)[23:8];
        bit<16> q_4_0 = (x32_4_0 * wq_0_0 + x32_4_1 * wq_1_0 + x32_4_2 * wq_2_0)[23:8];
        bit<16> q_4_1 = (x32_4_0 * wq_0_1 + x32_4_1 * wq_1_1 + x32_4_2 * wq_2_1)[23:8];
        bit<16> q_4_2 = (x32_4_0 * wq_0_2 + x32_4_1 * wq_1_2 + x32_4_2 * wq_2_2)[23:8];
        bit<16> q_5_0 = (x32_5_0 * wq_0_0 + x32_5_1 * wq_1_0 + x32_5_2 * wq_2_0)[23:8];
        bit<16> q_5_1 = (x32_5_0 * wq_0_1 + x32_5_1 * wq_1_1 + x32_5_2 * wq_2_1)[23:8];
        bit<16> q_5_2 = (x32_5_0 * wq_0_2 + x32_5_1 * wq_1_2 + x32_5_2 * wq_2_2)[23:8];
        bit<16> q_6_0 = (x32_6_0 * wq_0_0 + x32_6_1 * wq_1_0 + x32_6_2 * wq_2_0)[23:8];
        bit<16> q_6_1 = (x32_6_0 * wq_0_1 + x32_6_1 * wq_1_1 + x32_6_2 * wq_2_1)[23:8];
        bit<16> q_6_2 = (x32_6_0 * wq_0_2 + x32_6_1 * wq_1_2 + x32_6_2 * wq_2_2)[23:8];
        bit<16> q_7_0 = (x32_7_0 * wq_0_0 + x32_7_1 * wq_1_0 + x32_7_2 * wq_2_0)[23:8];
        bit<16> q_7_1 = (x32_7_0 * wq_0_1 + x32_7_1 * wq_1_1 + x32_7_2 * wq_2_1)[23:8];
        bit<16> q_7_2 = (x32_7_0 * wq_0_2 + x32_7_1 * wq_1_2 + x32_7_2 * wq_2_2)[23:8];

        // 计算k
        bit<16> k_0_0 = (x32_0_0 * wk_0_0 + x32_0_1 * wk_1_0 + x32_0_2 * wk_2_0)[23:8];
        bit<16> k_0_1 = (x32_0_0 * wk_0_1 + x32_0_1 * wk_1_1 + x32_0_2 * wk_2_1)[23:8];
        bit<16> k_0_2 = (x32_0_0 * wk_0_2 + x32_0_1 * wk_1_2 + x32_0_2 * wk_2_2)[23:8];
        bit<16> k_1_0 = (x32_1_0 * wk_0_0 + x32_1_1 * wk_1_0 + x32_1_2 * wk_2_0)[23:8];
        bit<16> k_1_1 = (x32_1_0 * wk_0_1 + x32_1_1 * wk_1_1 + x32_1_2 * wk_2_1)[23:8];
        bit<16> k_1_2 = (x32_1_0 * wk_0_2 + x32_1_1 * wk_1_2 + x32_1_2 * wk_2_2)[23:8];
        bit<16> k_2_0 = (x32_2_0 * wk_0_0 + x32_2_1 * wk_1_0 + x32_2_2 * wk_2_0)[23:8];
        bit<16> k_2_1 = (x32_2_0 * wk_0_1 + x32_2_1 * wk_1_1 + x32_2_2 * wk_2_1)[23:8];
        bit<16> k_2_2 = (x32_2_0 * wk_0_2 + x32_2_1 * wk_1_2 + x32_2_2 * wk_2_2)[23:8];
        bit<16> k_3_0 = (x32_3_0 * wk_0_0 + x32_3_1 * wk_1_0 + x32_3_2 * wk_2_0)[23:8];
        bit<16> k_3_1 = (x32_3_0 * wk_0_1 + x32_3_1 * wk_1_1 + x32_3_2 * wk_2_1)[23:8];
        bit<16> k_3_2 = (x32_3_0 * wk_0_2 + x32_3_1 * wk_1_2 + x32_3_2 * wk_2_2)[23:8];
        bit<16> k_4_0 = (x32_4_0 * wk_0_0 + x32_4_1 * wk_1_0 + x32_4_2 * wk_2_0)[23:8];
        bit<16> k_4_1 = (x32_4_0 * wk_0_1 + x32_4_1 * wk_1_1 + x32_4_2 * wk_2_1)[23:8];
        bit<16> k_4_2 = (x32_4_0 * wk_0_2 + x32_4_1 * wk_1_2 + x32_4_2 * wk_2_2)[23:8];
        bit<16> k_5_0 = (x32_5_0 * wk_0_0 + x32_5_1 * wk_1_0 + x32_5_2 * wk_2_0)[23:8];
        bit<16> k_5_1 = (x32_5_0 * wk_0_1 + x32_5_1 * wk_1_1 + x32_5_2 * wk_2_1)[23:8];
        bit<16> k_5_2 = (x32_5_0 * wk_0_2 + x32_5_1 * wk_1_2 + x32_5_2 * wk_2_2)[23:8];
        bit<16> k_6_0 = (x32_6_0 * wk_0_0 + x32_6_1 * wk_1_0 + x32_6_2 * wk_2_0)[23:8];
        bit<16> k_6_1 = (x32_6_0 * wk_0_1 + x32_6_1 * wk_1_1 + x32_6_2 * wk_2_1)[23:8];
        bit<16> k_6_2 = (x32_6_0 * wk_0_2 + x32_6_1 * wk_1_2 + x32_6_2 * wk_2_2)[23:8];
        bit<16> k_7_0 = (x32_7_0 * wk_0_0 + x32_7_1 * wk_1_0 + x32_7_2 * wk_2_0)[23:8];
        bit<16> k_7_1 = (x32_7_0 * wk_0_1 + x32_7_1 * wk_1_1 + x32_7_2 * wk_2_1)[23:8];
        bit<16> k_7_2 = (x32_7_0 * wk_0_2 + x32_7_1 * wk_1_2 + x32_7_2 * wk_2_2)[23:8];
        
        // 计算v
        bit<32> v32_0_0 = x32_0_0 * wv_0_0 + x32_0_1 * wv_1_0 + x32_0_2 * wv_2_0;
        bit<32> v32_0_1 = x32_0_0 * wv_0_1 + x32_0_1 * wv_1_1 + x32_0_2 * wv_2_1;
        bit<32> v32_0_2 = x32_0_0 * wv_0_2 + x32_0_1 * wv_1_2 + x32_0_2 * wv_2_2;
        bit<32> v32_1_0 = x32_1_0 * wv_0_0 + x32_1_1 * wv_1_0 + x32_1_2 * wv_2_0;
        bit<32> v32_1_1 = x32_1_0 * wv_0_1 + x32_1_1 * wv_1_1 + x32_1_2 * wv_2_1;
        bit<32> v32_1_2 = x32_1_0 * wv_0_2 + x32_1_1 * wv_1_2 + x32_1_2 * wv_2_2;
        bit<32> v32_2_0 = x32_2_0 * wv_0_0 + x32_2_1 * wv_1_0 + x32_2_2 * wv_2_0;
        bit<32> v32_2_1 = x32_2_0 * wv_0_1 + x32_2_1 * wv_1_1 + x32_2_2 * wv_2_1;
        bit<32> v32_2_2 = x32_2_0 * wv_0_2 + x32_2_1 * wv_1_2 + x32_2_2 * wv_2_2;
        bit<32> v32_3_0 = x32_3_0 * wv_0_0 + x32_3_1 * wv_1_0 + x32_3_2 * wv_2_0;
        bit<32> v32_3_1 = x32_3_0 * wv_0_1 + x32_3_1 * wv_1_1 + x32_3_2 * wv_2_1;
        bit<32> v32_3_2 = x32_3_0 * wv_0_2 + x32_3_1 * wv_1_2 + x32_3_2 * wv_2_2;
        bit<32> v32_4_0 = x32_4_0 * wv_0_0 + x32_4_1 * wv_1_0 + x32_4_2 * wv_2_0;
        bit<32> v32_4_1 = x32_4_0 * wv_0_1 + x32_4_1 * wv_1_1 + x32_4_2 * wv_2_1;
        bit<32> v32_4_2 = x32_4_0 * wv_0_2 + x32_4_1 * wv_1_2 + x32_4_2 * wv_2_2;
        bit<32> v32_5_0 = x32_5_0 * wv_0_0 + x32_5_1 * wv_1_0 + x32_5_2 * wv_2_0;
        bit<32> v32_5_1 = x32_5_0 * wv_0_1 + x32_5_1 * wv_1_1 + x32_5_2 * wv_2_1;
        bit<32> v32_5_2 = x32_5_0 * wv_0_2 + x32_5_1 * wv_1_2 + x32_5_2 * wv_2_2;
        bit<32> v32_6_0 = x32_6_0 * wv_0_0 + x32_6_1 * wv_1_0 + x32_6_2 * wv_2_0;
        bit<32> v32_6_1 = x32_6_0 * wv_0_1 + x32_6_1 * wv_1_1 + x32_6_2 * wv_2_1;
        bit<32> v32_6_2 = x32_6_0 * wv_0_2 + x32_6_1 * wv_1_2 + x32_6_2 * wv_2_2;
        bit<32> v32_7_0 = x32_7_0 * wv_0_0 + x32_7_1 * wv_1_0 + x32_7_2 * wv_2_0;
        bit<32> v32_7_1 = x32_7_0 * wv_0_1 + x32_7_1 * wv_1_1 + x32_7_2 * wv_2_1;
        bit<32> v32_7_2 = x32_7_0 * wv_0_2 + x32_7_1 * wv_1_2 + x32_7_2 * wv_2_2;

        bit<32> v_0_0 = (bit<32>) v32_0_0[31:8] | (((v32_0_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_0_1 = (bit<32>) v32_0_1[31:8] | (((v32_0_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_0_2 = (bit<32>) v32_0_2[31:8] | (((v32_0_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_1_0 = (bit<32>) v32_1_0[31:8] | (((v32_1_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_1_1 = (bit<32>) v32_1_1[31:8] | (((v32_1_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_1_2 = (bit<32>) v32_1_2[31:8] | (((v32_1_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_2_0 = (bit<32>) v32_2_0[31:8] | (((v32_2_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_2_1 = (bit<32>) v32_2_1[31:8] | (((v32_2_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_2_2 = (bit<32>) v32_2_2[31:8] | (((v32_2_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_3_0 = (bit<32>) v32_3_0[31:8] | (((v32_3_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_3_1 = (bit<32>) v32_3_1[31:8] | (((v32_3_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_3_2 = (bit<32>) v32_3_2[31:8] | (((v32_3_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_4_0 = (bit<32>) v32_4_0[31:8] | (((v32_4_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_4_1 = (bit<32>) v32_4_1[31:8] | (((v32_4_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_4_2 = (bit<32>) v32_4_2[31:8] | (((v32_4_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_5_0 = (bit<32>) v32_5_0[31:8] | (((v32_5_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_5_1 = (bit<32>) v32_5_1[31:8] | (((v32_5_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_5_2 = (bit<32>) v32_5_2[31:8] | (((v32_5_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_6_0 = (bit<32>) v32_6_0[31:8] | (((v32_6_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_6_1 = (bit<32>) v32_6_1[31:8] | (((v32_6_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_6_2 = (bit<32>) v32_6_2[31:8] | (((v32_6_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_7_0 = (bit<32>) v32_7_0[31:8] | (((v32_7_0[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_7_1 = (bit<32>) v32_7_1[31:8] | (((v32_7_1[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);
        bit<32> v_7_2 = (bit<32>) v32_7_2[31:8] | (((v32_7_2[31:8] & 0x800000) != 0) ? 32w0xFF000000 : 0);

        // 把v读入寄存器供后续使用
        v_value.write(0,v_0_0);
        v_value.write(1,v_0_1);
        v_value.write(2,v_0_2);
        v_value.write(3,v_1_0);
        v_value.write(4,v_1_1);
        v_value.write(5,v_1_2);
        v_value.write(6,v_2_0);
        v_value.write(7,v_2_1);
        v_value.write(8,v_2_2);
        v_value.write(9,v_3_0);
        v_value.write(10,v_3_1);
        v_value.write(11,v_3_2);
        v_value.write(12,v_4_0);
        v_value.write(13,v_4_1);
        v_value.write(14,v_4_2);
        v_value.write(15,v_5_0);
        v_value.write(16,v_5_1);
        v_value.write(17,v_5_2);
        v_value.write(18,v_6_0);
        v_value.write(19,v_6_1);
        v_value.write(20,v_6_2);
        v_value.write(21,v_7_0);
        v_value.write(22,v_7_1);
        v_value.write(23,v_7_2);

        // q,k符号扩展到32位
        bit<32> q32_0_0 = (bit<32>) q_0_0 | (((q_0_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_0_1 = (bit<32>) q_0_1 | (((q_0_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_0_2 = (bit<32>) q_0_2 | (((q_0_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_1_0 = (bit<32>) q_1_0 | (((q_1_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_1_1 = (bit<32>) q_1_1 | (((q_1_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_1_2 = (bit<32>) q_1_2 | (((q_1_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_2_0 = (bit<32>) q_2_0 | (((q_2_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_2_1 = (bit<32>) q_2_1 | (((q_2_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_2_2 = (bit<32>) q_2_2 | (((q_2_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_3_0 = (bit<32>) q_3_0 | (((q_3_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_3_1 = (bit<32>) q_3_1 | (((q_3_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_3_2 = (bit<32>) q_3_2 | (((q_3_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_4_0 = (bit<32>) q_4_0 | (((q_4_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_4_1 = (bit<32>) q_4_1 | (((q_4_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_4_2 = (bit<32>) q_4_2 | (((q_4_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_5_0 = (bit<32>) q_5_0 | (((q_5_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_5_1 = (bit<32>) q_5_1 | (((q_5_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_5_2 = (bit<32>) q_5_2 | (((q_5_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_6_0 = (bit<32>) q_6_0 | (((q_6_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_6_1 = (bit<32>) q_6_1 | (((q_6_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_6_2 = (bit<32>) q_6_2 | (((q_6_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_7_0 = (bit<32>) q_7_0 | (((q_7_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_7_1 = (bit<32>) q_7_1 | (((q_7_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> q32_7_2 = (bit<32>) q_7_2 | (((q_7_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);

        bit<32> k32_0_0 = (bit<32>) k_0_0 | (((k_0_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_0_1 = (bit<32>) k_0_1 | (((k_0_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_0_2 = (bit<32>) k_0_2 | (((k_0_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_1_0 = (bit<32>) k_1_0 | (((k_1_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_1_1 = (bit<32>) k_1_1 | (((k_1_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_1_2 = (bit<32>) k_1_2 | (((k_1_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_2_0 = (bit<32>) k_2_0 | (((k_2_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_2_1 = (bit<32>) k_2_1 | (((k_2_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_2_2 = (bit<32>) k_2_2 | (((k_2_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_3_0 = (bit<32>) k_3_0 | (((k_3_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_3_1 = (bit<32>) k_3_1 | (((k_3_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_3_2 = (bit<32>) k_3_2 | (((k_3_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_4_0 = (bit<32>) k_4_0 | (((k_4_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_4_1 = (bit<32>) k_4_1 | (((k_4_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_4_2 = (bit<32>) k_4_2 | (((k_4_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_5_0 = (bit<32>) k_5_0 | (((k_5_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_5_1 = (bit<32>) k_5_1 | (((k_5_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_5_2 = (bit<32>) k_5_2 | (((k_5_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_6_0 = (bit<32>) k_6_0 | (((k_6_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_6_1 = (bit<32>) k_6_1 | (((k_6_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_6_2 = (bit<32>) k_6_2 | (((k_6_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_7_0 = (bit<32>) k_7_0 | (((k_7_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_7_1 = (bit<32>) k_7_1 | (((k_7_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<32> k32_7_2 = (bit<32>) k_7_2 | (((k_7_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);

        // 计算q*k_t，这里取16位，为下面查表做准备
        bit<16> q_mul16_kt_0_0 = (q32_0_0 * k32_0_0 + q32_0_1 * k32_0_1 + q32_0_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_0_1 = (q32_0_0 * k32_1_0 + q32_0_1 * k32_1_1 + q32_0_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_0_2 = (q32_0_0 * k32_2_0 + q32_0_1 * k32_2_1 + q32_0_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_0_3 = (q32_0_0 * k32_3_0 + q32_0_1 * k32_3_1 + q32_0_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_0_4 = (q32_0_0 * k32_4_0 + q32_0_1 * k32_4_1 + q32_0_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_0_5 = (q32_0_0 * k32_5_0 + q32_0_1 * k32_5_1 + q32_0_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_0_6 = (q32_0_0 * k32_6_0 + q32_0_1 * k32_6_1 + q32_0_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_0_7 = (q32_0_0 * k32_7_0 + q32_0_1 * k32_7_1 + q32_0_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_1_0 = (q32_1_0 * k32_0_0 + q32_1_1 * k32_0_1 + q32_1_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_1_1 = (q32_1_0 * k32_1_0 + q32_1_1 * k32_1_1 + q32_1_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_1_2 = (q32_1_0 * k32_2_0 + q32_1_1 * k32_2_1 + q32_1_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_1_3 = (q32_1_0 * k32_3_0 + q32_1_1 * k32_3_1 + q32_1_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_1_4 = (q32_1_0 * k32_4_0 + q32_1_1 * k32_4_1 + q32_1_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_1_5 = (q32_1_0 * k32_5_0 + q32_1_1 * k32_5_1 + q32_1_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_1_6 = (q32_1_0 * k32_6_0 + q32_1_1 * k32_6_1 + q32_1_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_1_7 = (q32_1_0 * k32_7_0 + q32_1_1 * k32_7_1 + q32_1_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_2_0 = (q32_2_0 * k32_0_0 + q32_2_1 * k32_0_1 + q32_2_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_2_1 = (q32_2_0 * k32_1_0 + q32_2_1 * k32_1_1 + q32_2_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_2_2 = (q32_2_0 * k32_2_0 + q32_2_1 * k32_2_1 + q32_2_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_2_3 = (q32_2_0 * k32_3_0 + q32_2_1 * k32_3_1 + q32_2_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_2_4 = (q32_2_0 * k32_4_0 + q32_2_1 * k32_4_1 + q32_2_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_2_5 = (q32_2_0 * k32_5_0 + q32_2_1 * k32_5_1 + q32_2_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_2_6 = (q32_2_0 * k32_6_0 + q32_2_1 * k32_6_1 + q32_2_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_2_7 = (q32_2_0 * k32_7_0 + q32_2_1 * k32_7_1 + q32_2_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_3_0 = (q32_3_0 * k32_0_0 + q32_3_1 * k32_0_1 + q32_3_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_3_1 = (q32_3_0 * k32_1_0 + q32_3_1 * k32_1_1 + q32_3_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_3_2 = (q32_3_0 * k32_2_0 + q32_3_1 * k32_2_1 + q32_3_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_3_3 = (q32_3_0 * k32_3_0 + q32_3_1 * k32_3_1 + q32_3_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_3_4 = (q32_3_0 * k32_4_0 + q32_3_1 * k32_4_1 + q32_3_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_3_5 = (q32_3_0 * k32_5_0 + q32_3_1 * k32_5_1 + q32_3_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_3_6 = (q32_3_0 * k32_6_0 + q32_3_1 * k32_6_1 + q32_3_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_3_7 = (q32_3_0 * k32_7_0 + q32_3_1 * k32_7_1 + q32_3_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_4_0 = (q32_4_0 * k32_0_0 + q32_4_1 * k32_0_1 + q32_4_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_4_1 = (q32_4_0 * k32_1_0 + q32_4_1 * k32_1_1 + q32_4_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_4_2 = (q32_4_0 * k32_2_0 + q32_4_1 * k32_2_1 + q32_4_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_4_3 = (q32_4_0 * k32_3_0 + q32_4_1 * k32_3_1 + q32_4_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_4_4 = (q32_4_0 * k32_4_0 + q32_4_1 * k32_4_1 + q32_4_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_4_5 = (q32_4_0 * k32_5_0 + q32_4_1 * k32_5_1 + q32_4_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_4_6 = (q32_4_0 * k32_6_0 + q32_4_1 * k32_6_1 + q32_4_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_4_7 = (q32_4_0 * k32_7_0 + q32_4_1 * k32_7_1 + q32_4_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_5_0 = (q32_5_0 * k32_0_0 + q32_5_1 * k32_0_1 + q32_5_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_5_1 = (q32_5_0 * k32_1_0 + q32_5_1 * k32_1_1 + q32_5_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_5_2 = (q32_5_0 * k32_2_0 + q32_5_1 * k32_2_1 + q32_5_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_5_3 = (q32_5_0 * k32_3_0 + q32_5_1 * k32_3_1 + q32_5_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_5_4 = (q32_5_0 * k32_4_0 + q32_5_1 * k32_4_1 + q32_5_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_5_5 = (q32_5_0 * k32_5_0 + q32_5_1 * k32_5_1 + q32_5_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_5_6 = (q32_5_0 * k32_6_0 + q32_5_1 * k32_6_1 + q32_5_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_5_7 = (q32_5_0 * k32_7_0 + q32_5_1 * k32_7_1 + q32_5_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_6_0 = (q32_6_0 * k32_0_0 + q32_6_1 * k32_0_1 + q32_6_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_6_1 = (q32_6_0 * k32_1_0 + q32_6_1 * k32_1_1 + q32_6_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_6_2 = (q32_6_0 * k32_2_0 + q32_6_1 * k32_2_1 + q32_6_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_6_3 = (q32_6_0 * k32_3_0 + q32_6_1 * k32_3_1 + q32_6_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_6_4 = (q32_6_0 * k32_4_0 + q32_6_1 * k32_4_1 + q32_6_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_6_5 = (q32_6_0 * k32_5_0 + q32_6_1 * k32_5_1 + q32_6_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_6_6 = (q32_6_0 * k32_6_0 + q32_6_1 * k32_6_1 + q32_6_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_6_7 = (q32_6_0 * k32_7_0 + q32_6_1 * k32_7_1 + q32_6_2 * k32_7_2)[23:8] ;
        bit<16> q_mul16_kt_7_0 = (q32_7_0 * k32_0_0 + q32_7_1 * k32_0_1 + q32_7_2 * k32_0_2)[23:8] ;
        bit<16> q_mul16_kt_7_1 = (q32_7_0 * k32_1_0 + q32_7_1 * k32_1_1 + q32_7_2 * k32_1_2)[23:8] ;
        bit<16> q_mul16_kt_7_2 = (q32_7_0 * k32_2_0 + q32_7_1 * k32_2_1 + q32_7_2 * k32_2_2)[23:8] ;
        bit<16> q_mul16_kt_7_3 = (q32_7_0 * k32_3_0 + q32_7_1 * k32_3_1 + q32_7_2 * k32_3_2)[23:8] ;
        bit<16> q_mul16_kt_7_4 = (q32_7_0 * k32_4_0 + q32_7_1 * k32_4_1 + q32_7_2 * k32_4_2)[23:8] ;
        bit<16> q_mul16_kt_7_5 = (q32_7_0 * k32_5_0 + q32_7_1 * k32_5_1 + q32_7_2 * k32_5_2)[23:8] ;
        bit<16> q_mul16_kt_7_6 = (q32_7_0 * k32_6_0 + q32_7_1 * k32_6_1 + q32_7_2 * k32_6_2)[23:8] ;
        bit<16> q_mul16_kt_7_7 = (q32_7_0 * k32_7_0 + q32_7_1 * k32_7_1 + q32_7_2 * k32_7_2)[23:8] ;

        // 将q_mul16_kt写入寄存器
        q_mul16_kt.write(0,q_mul16_kt_0_0);
        q_mul16_kt.write(1,q_mul16_kt_0_1);
        q_mul16_kt.write(2,q_mul16_kt_0_2);
        q_mul16_kt.write(3,q_mul16_kt_0_3);
        q_mul16_kt.write(4,q_mul16_kt_0_4);
        q_mul16_kt.write(5,q_mul16_kt_0_5);
        q_mul16_kt.write(6,q_mul16_kt_0_6);
        q_mul16_kt.write(7,q_mul16_kt_0_7);
        q_mul16_kt.write(8,q_mul16_kt_1_0);
        q_mul16_kt.write(9,q_mul16_kt_1_1);
        q_mul16_kt.write(10,q_mul16_kt_1_2);
        q_mul16_kt.write(11,q_mul16_kt_1_3);
        q_mul16_kt.write(12,q_mul16_kt_1_4);
        q_mul16_kt.write(13,q_mul16_kt_1_5);
        q_mul16_kt.write(14,q_mul16_kt_1_6);
        q_mul16_kt.write(15,q_mul16_kt_1_7);
        q_mul16_kt.write(16,q_mul16_kt_2_0);
        q_mul16_kt.write(17,q_mul16_kt_2_1);
        q_mul16_kt.write(18,q_mul16_kt_2_2);
        q_mul16_kt.write(19,q_mul16_kt_2_3);
        q_mul16_kt.write(20,q_mul16_kt_2_4);
        q_mul16_kt.write(21,q_mul16_kt_2_5);
        q_mul16_kt.write(22,q_mul16_kt_2_6);
        q_mul16_kt.write(23,q_mul16_kt_2_7);
        q_mul16_kt.write(24,q_mul16_kt_3_0);
        q_mul16_kt.write(25,q_mul16_kt_3_1);
        q_mul16_kt.write(26,q_mul16_kt_3_2);
        q_mul16_kt.write(27,q_mul16_kt_3_3);
        q_mul16_kt.write(28,q_mul16_kt_3_4);
        q_mul16_kt.write(29,q_mul16_kt_3_5);
        q_mul16_kt.write(30,q_mul16_kt_3_6);
        q_mul16_kt.write(31,q_mul16_kt_3_7);
        q_mul16_kt.write(32,q_mul16_kt_4_0);
        q_mul16_kt.write(33,q_mul16_kt_4_1);
        q_mul16_kt.write(34,q_mul16_kt_4_2);
        q_mul16_kt.write(35,q_mul16_kt_4_3);
        q_mul16_kt.write(36,q_mul16_kt_4_4);
        q_mul16_kt.write(37,q_mul16_kt_4_5);
        q_mul16_kt.write(38,q_mul16_kt_4_6);
        q_mul16_kt.write(39,q_mul16_kt_4_7);
        q_mul16_kt.write(40,q_mul16_kt_5_0);
        q_mul16_kt.write(41,q_mul16_kt_5_1);
        q_mul16_kt.write(42,q_mul16_kt_5_2);
        q_mul16_kt.write(43,q_mul16_kt_5_3);
        q_mul16_kt.write(44,q_mul16_kt_5_4);
        q_mul16_kt.write(45,q_mul16_kt_5_5);
        q_mul16_kt.write(46,q_mul16_kt_5_6);
        q_mul16_kt.write(47,q_mul16_kt_5_7);
        q_mul16_kt.write(48,q_mul16_kt_6_0);
        q_mul16_kt.write(49,q_mul16_kt_6_1);
        q_mul16_kt.write(50,q_mul16_kt_6_2);
        q_mul16_kt.write(51,q_mul16_kt_6_3);
        q_mul16_kt.write(52,q_mul16_kt_6_4);
        q_mul16_kt.write(53,q_mul16_kt_6_5);
        q_mul16_kt.write(54,q_mul16_kt_6_6);
        q_mul16_kt.write(55,q_mul16_kt_6_7);
        q_mul16_kt.write(56,q_mul16_kt_7_0);
        q_mul16_kt.write(57,q_mul16_kt_7_1);
        q_mul16_kt.write(58,q_mul16_kt_7_2);
        q_mul16_kt.write(59,q_mul16_kt_7_3);
        q_mul16_kt.write(60,q_mul16_kt_7_4);
        q_mul16_kt.write(61,q_mul16_kt_7_5);
        q_mul16_kt.write(62,q_mul16_kt_7_6);
        q_mul16_kt.write(63,q_mul16_kt_7_7);
    }

    // 由于一个apply里面不能对同一个table进行多次操作，所以这里可以用一个简单的register来存储结果(bit<32>)
    action store_exp_result() {
        exp_result.write(0,256);
        exp_result.write(1,329);
        exp_result.write(2,422);
        exp_result.write(3,542);
        exp_result.write(4,696);
        exp_result.write(5,894);
        exp_result.write(6,1147);
        exp_result.write(7,1473);
        exp_result.write(8,1892);
        exp_result.write(9,2429);
        exp_result.write(10,3119);
        exp_result.write(11,4005);
        exp_result.write(12,5142);
        exp_result.write(13,6602);
        exp_result.write(14,8478);
        exp_result.write(15,10885);
        exp_result.write(16,13977);
        exp_result.write(17,17947);
        exp_result.write(18,23044);
        exp_result.write(19,29590);
        exp_result.write(20,37994);
        exp_result.write(21,48785);
        exp_result.write(22,62641);
        exp_result.write(23,80433);
        exp_result.write(24,103278);
        exp_result.write(25,132611);
        exp_result.write(26,170276);
        exp_result.write(27,218639);
        exp_result.write(28,280738);
        exp_result.write(29,360475);
        exp_result.write(30,462859);
        exp_result.write(31,594323);
        exp_result.write(32,763125);
        exp_result.write(33,979872);
        exp_result.write(34,1258181);
        exp_result.write(35,1615536);
        exp_result.write(36,2074389);
        exp_result.write(37,2663569);
        exp_result.write(38,3420090);
        exp_result.write(39,4391483);
        exp_result.write(40,5638775);
        exp_result.write(41,7240331);
        exp_result.write(42,9296769);
        exp_result.write(43,11937287);
        exp_result.write(44,15327780);
        exp_result.write(45,19681259);
        exp_result.write(46,25271237);
        exp_result.write(47,32448911);
        exp_result.write(48,41665227);
        exp_result.write(49,53499210);
        exp_result.write(50,68694345);
        exp_result.write(51,88205285);
        exp_result.write(52,113257828);
        exp_result.write(53,145425930);
        exp_result.write(54,186730591);
        exp_result.write(55,239766825);
        exp_result.write(56,307866697);
        exp_result.write(57,395308664);
        exp_result.write(58,507586371);
        exp_result.write(59,651753802);
        exp_result.write(60,836868447);
        exp_result.write(61,1074560357);
        exp_result.write(62,1379762810);
        exp_result.write(63,1771650517);
        exp_result.write(64,2147483647);
        exp_result.write(65,2147483647);
        exp_result.write(66,2147483647);
        exp_result.write(67,2147483647);
        exp_result.write(68,2147483647);
        exp_result.write(69,2147483647);
        exp_result.write(70,2147483647);
        exp_result.write(71,2147483647);
        exp_result.write(72,2147483647);
        exp_result.write(73,2147483647);
        exp_result.write(74,2147483647);
        exp_result.write(75,2147483647);
        exp_result.write(76,2147483647);
        exp_result.write(77,2147483647);
        exp_result.write(78,2147483647);
        exp_result.write(79,2147483647);
        exp_result.write(80,2147483647);
        exp_result.write(81,2147483647);
        exp_result.write(82,2147483647);
        exp_result.write(83,2147483647);
        exp_result.write(84,2147483647);
        exp_result.write(85,2147483647);
        exp_result.write(86,2147483647);
        exp_result.write(87,2147483647);
        exp_result.write(88,2147483647);
        exp_result.write(89,2147483647);
        exp_result.write(90,2147483647);
        exp_result.write(91,2147483647);
        exp_result.write(92,2147483647);
        exp_result.write(93,2147483647);
        exp_result.write(94,2147483647);
        exp_result.write(95,2147483647);
        exp_result.write(96,2147483647);
        exp_result.write(97,2147483647);
        exp_result.write(98,2147483647);
        exp_result.write(99,2147483647);
        exp_result.write(100,2147483647);
        exp_result.write(101,2147483647);
        exp_result.write(102,2147483647);
        exp_result.write(103,2147483647);
        exp_result.write(104,2147483647);
        exp_result.write(105,2147483647);
        exp_result.write(106,2147483647);
        exp_result.write(107,2147483647);
        exp_result.write(108,2147483647);
        exp_result.write(109,2147483647);
        exp_result.write(110,2147483647);
        exp_result.write(111,2147483647);
        exp_result.write(112,2147483647);
        exp_result.write(113,2147483647);
        exp_result.write(114,2147483647);
        exp_result.write(115,2147483647);
        exp_result.write(116,2147483647);
        exp_result.write(117,2147483647);
        exp_result.write(118,2147483647);
        exp_result.write(119,2147483647);
        exp_result.write(120,2147483647);
        exp_result.write(121,2147483647);
        exp_result.write(122,2147483647);
        exp_result.write(123,2147483647);
        exp_result.write(124,2147483647);
        exp_result.write(125,2147483647);
        exp_result.write(126,2147483647);
        exp_result.write(127,2147483647);
        exp_result.write(128,2147483647);
        exp_result.write(129,2147483647);
        exp_result.write(130,2147483647);
        exp_result.write(131,2147483647);
        exp_result.write(132,2147483647);
        exp_result.write(133,2147483647);
        exp_result.write(134,2147483647);
        exp_result.write(135,2147483647);
        exp_result.write(136,2147483647);
        exp_result.write(137,2147483647);
        exp_result.write(138,2147483647);
        exp_result.write(139,2147483647);
        exp_result.write(140,2147483647);
        exp_result.write(141,2147483647);
        exp_result.write(142,2147483647);
        exp_result.write(143,2147483647);
        exp_result.write(144,2147483647);
        exp_result.write(145,2147483647);
        exp_result.write(146,2147483647);
        exp_result.write(147,2147483647);
        exp_result.write(148,2147483647);
        exp_result.write(149,2147483647);
        exp_result.write(150,2147483647);
        exp_result.write(151,2147483647);
        exp_result.write(152,2147483647);
        exp_result.write(153,2147483647);
        exp_result.write(154,2147483647);
        exp_result.write(155,2147483647);
        exp_result.write(156,2147483647);
        exp_result.write(157,2147483647);
        exp_result.write(158,2147483647);
        exp_result.write(159,2147483647);
        exp_result.write(160,2147483647);
        exp_result.write(161,2147483647);
        exp_result.write(162,2147483647);
        exp_result.write(163,2147483647);
        exp_result.write(164,2147483647);
        exp_result.write(165,2147483647);
        exp_result.write(166,2147483647);
        exp_result.write(167,2147483647);
        exp_result.write(168,2147483647);
        exp_result.write(169,2147483647);
        exp_result.write(170,2147483647);
        exp_result.write(171,2147483647);
        exp_result.write(172,2147483647);
        exp_result.write(173,2147483647);
        exp_result.write(174,2147483647);
        exp_result.write(175,2147483647);
        exp_result.write(176,2147483647);
        exp_result.write(177,2147483647);
        exp_result.write(178,2147483647);
        exp_result.write(179,2147483647);
        exp_result.write(180,2147483647);
        exp_result.write(181,2147483647);
        exp_result.write(182,2147483647);
        exp_result.write(183,2147483647);
        exp_result.write(184,2147483647);
        exp_result.write(185,2147483647);
        exp_result.write(186,2147483647);
        exp_result.write(187,2147483647);
        exp_result.write(188,2147483647);
        exp_result.write(189,2147483647);
        exp_result.write(190,2147483647);
        exp_result.write(191,2147483647);
        exp_result.write(192,2147483647);
        exp_result.write(193,2147483647);
        exp_result.write(194,2147483647);
        exp_result.write(195,2147483647);
        exp_result.write(196,2147483647);
        exp_result.write(197,2147483647);
        exp_result.write(198,2147483647);
        exp_result.write(199,2147483647);
        exp_result.write(200,2147483647);
        exp_result.write(201,2147483647);
        exp_result.write(202,2147483647);
        exp_result.write(203,2147483647);
        exp_result.write(204,2147483647);
        exp_result.write(205,2147483647);
        exp_result.write(206,2147483647);
        exp_result.write(207,2147483647);
        exp_result.write(208,2147483647);
        exp_result.write(209,2147483647);
        exp_result.write(210,2147483647);
        exp_result.write(211,2147483647);
        exp_result.write(212,2147483647);
        exp_result.write(213,2147483647);
        exp_result.write(214,2147483647);
        exp_result.write(215,2147483647);
        exp_result.write(216,2147483647);
        exp_result.write(217,2147483647);
        exp_result.write(218,2147483647);
        exp_result.write(219,2147483647);
        exp_result.write(220,2147483647);
        exp_result.write(221,2147483647);
        exp_result.write(222,2147483647);
        exp_result.write(223,2147483647);
        exp_result.write(224,2147483647);
        exp_result.write(225,2147483647);
        exp_result.write(226,2147483647);
        exp_result.write(227,2147483647);
        exp_result.write(228,2147483647);
        exp_result.write(229,2147483647);
        exp_result.write(230,2147483647);
        exp_result.write(231,2147483647);
        exp_result.write(232,2147483647);
        exp_result.write(233,2147483647);
        exp_result.write(234,2147483647);
        exp_result.write(235,2147483647);
        exp_result.write(236,2147483647);
        exp_result.write(237,2147483647);
        exp_result.write(238,2147483647);
        exp_result.write(239,2147483647);
        exp_result.write(240,2147483647);
        exp_result.write(241,2147483647);
        exp_result.write(242,2147483647);
        exp_result.write(243,2147483647);
        exp_result.write(244,2147483647);
        exp_result.write(245,2147483647);
        exp_result.write(246,2147483647);
        exp_result.write(247,2147483647);
        exp_result.write(248,2147483647);
        exp_result.write(249,2147483647);
        exp_result.write(250,2147483647);
        exp_result.write(251,2147483647);
        exp_result.write(252,2147483647);
        exp_result.write(253,2147483647);
        exp_result.write(254,2147483647);
        exp_result.write(255,2147483647);
        exp_result.write(256,2147483647);
        exp_result.write(257,2147483647);
        exp_result.write(258,2147483647);
        exp_result.write(259,2147483647);
        exp_result.write(260,2147483647);
        exp_result.write(261,2147483647);
        exp_result.write(262,2147483647);
        exp_result.write(263,2147483647);
        exp_result.write(264,2147483647);
        exp_result.write(265,2147483647);
        exp_result.write(266,2147483647);
        exp_result.write(267,2147483647);
        exp_result.write(268,2147483647);
        exp_result.write(269,2147483647);
        exp_result.write(270,2147483647);
        exp_result.write(271,2147483647);
        exp_result.write(272,2147483647);
        exp_result.write(273,2147483647);
        exp_result.write(274,2147483647);
        exp_result.write(275,2147483647);
        exp_result.write(276,2147483647);
        exp_result.write(277,2147483647);
        exp_result.write(278,2147483647);
        exp_result.write(279,2147483647);
        exp_result.write(280,2147483647);
        exp_result.write(281,2147483647);
        exp_result.write(282,2147483647);
        exp_result.write(283,2147483647);
        exp_result.write(284,2147483647);
        exp_result.write(285,2147483647);
        exp_result.write(286,2147483647);
        exp_result.write(287,2147483647);
        exp_result.write(288,2147483647);
        exp_result.write(289,2147483647);
        exp_result.write(290,2147483647);
        exp_result.write(291,2147483647);
        exp_result.write(292,2147483647);
        exp_result.write(293,2147483647);
        exp_result.write(294,2147483647);
        exp_result.write(295,2147483647);
        exp_result.write(296,2147483647);
        exp_result.write(297,2147483647);
        exp_result.write(298,2147483647);
        exp_result.write(299,2147483647);
        exp_result.write(300,2147483647);
        exp_result.write(301,2147483647);
        exp_result.write(302,2147483647);
        exp_result.write(303,2147483647);
        exp_result.write(304,2147483647);
        exp_result.write(305,2147483647);
        exp_result.write(306,2147483647);
        exp_result.write(307,2147483647);
        exp_result.write(308,2147483647);
        exp_result.write(309,2147483647);
        exp_result.write(310,2147483647);
        exp_result.write(311,2147483647);
        exp_result.write(312,2147483647);
        exp_result.write(313,2147483647);
        exp_result.write(314,2147483647);
        exp_result.write(315,2147483647);
        exp_result.write(316,2147483647);
        exp_result.write(317,2147483647);
        exp_result.write(318,2147483647);
        exp_result.write(319,2147483647);
        exp_result.write(320,2147483647);
        exp_result.write(321,2147483647);
        exp_result.write(322,2147483647);
        exp_result.write(323,2147483647);
        exp_result.write(324,2147483647);
        exp_result.write(325,2147483647);
        exp_result.write(326,2147483647);
        exp_result.write(327,2147483647);
        exp_result.write(328,2147483647);
        exp_result.write(329,2147483647);
        exp_result.write(330,2147483647);
        exp_result.write(331,2147483647);
        exp_result.write(332,2147483647);
        exp_result.write(333,2147483647);
        exp_result.write(334,2147483647);
        exp_result.write(335,2147483647);
        exp_result.write(336,2147483647);
        exp_result.write(337,2147483647);
        exp_result.write(338,2147483647);
        exp_result.write(339,2147483647);
        exp_result.write(340,2147483647);
        exp_result.write(341,2147483647);
        exp_result.write(342,2147483647);
        exp_result.write(343,2147483647);
        exp_result.write(344,2147483647);
        exp_result.write(345,2147483647);
        exp_result.write(346,2147483647);
        exp_result.write(347,2147483647);
        exp_result.write(348,2147483647);
        exp_result.write(349,2147483647);
        exp_result.write(350,2147483647);
        exp_result.write(351,2147483647);
        exp_result.write(352,2147483647);
        exp_result.write(353,2147483647);
        exp_result.write(354,2147483647);
        exp_result.write(355,2147483647);
        exp_result.write(356,2147483647);
        exp_result.write(357,2147483647);
        exp_result.write(358,2147483647);
        exp_result.write(359,2147483647);
        exp_result.write(360,2147483647);
        exp_result.write(361,2147483647);
        exp_result.write(362,2147483647);
        exp_result.write(363,2147483647);
        exp_result.write(364,2147483647);
        exp_result.write(365,2147483647);
        exp_result.write(366,2147483647);
        exp_result.write(367,2147483647);
        exp_result.write(368,2147483647);
        exp_result.write(369,2147483647);
        exp_result.write(370,2147483647);
        exp_result.write(371,2147483647);
        exp_result.write(372,2147483647);
        exp_result.write(373,2147483647);
        exp_result.write(374,2147483647);
        exp_result.write(375,2147483647);
        exp_result.write(376,2147483647);
        exp_result.write(377,2147483647);
        exp_result.write(378,2147483647);
        exp_result.write(379,2147483647);
        exp_result.write(380,2147483647);
        exp_result.write(381,2147483647);
        exp_result.write(382,2147483647);
        exp_result.write(383,2147483647);
        exp_result.write(384,2147483647);
        exp_result.write(385,2147483647);
        exp_result.write(386,2147483647);
        exp_result.write(387,2147483647);
        exp_result.write(388,2147483647);
        exp_result.write(389,2147483647);
        exp_result.write(390,2147483647);
        exp_result.write(391,2147483647);
        exp_result.write(392,2147483647);
        exp_result.write(393,2147483647);
        exp_result.write(394,2147483647);
        exp_result.write(395,2147483647);
        exp_result.write(396,2147483647);
        exp_result.write(397,2147483647);
        exp_result.write(398,2147483647);
        exp_result.write(399,2147483647);
        exp_result.write(400,2147483647);
        exp_result.write(401,2147483647);
        exp_result.write(402,2147483647);
        exp_result.write(403,2147483647);
        exp_result.write(404,2147483647);
        exp_result.write(405,2147483647);
        exp_result.write(406,2147483647);
        exp_result.write(407,2147483647);
        exp_result.write(408,2147483647);
        exp_result.write(409,2147483647);
        exp_result.write(410,2147483647);
        exp_result.write(411,2147483647);
        exp_result.write(412,2147483647);
        exp_result.write(413,2147483647);
        exp_result.write(414,2147483647);
        exp_result.write(415,2147483647);
        exp_result.write(416,2147483647);
        exp_result.write(417,2147483647);
        exp_result.write(418,2147483647);
        exp_result.write(419,2147483647);
        exp_result.write(420,2147483647);
        exp_result.write(421,2147483647);
        exp_result.write(422,2147483647);
        exp_result.write(423,2147483647);
        exp_result.write(424,2147483647);
        exp_result.write(425,2147483647);
        exp_result.write(426,2147483647);
        exp_result.write(427,2147483647);
        exp_result.write(428,2147483647);
        exp_result.write(429,2147483647);
        exp_result.write(430,2147483647);
        exp_result.write(431,2147483647);
        exp_result.write(432,2147483647);
        exp_result.write(433,2147483647);
        exp_result.write(434,2147483647);
        exp_result.write(435,2147483647);
        exp_result.write(436,2147483647);
        exp_result.write(437,2147483647);
        exp_result.write(438,2147483647);
        exp_result.write(439,2147483647);
        exp_result.write(440,2147483647);
        exp_result.write(441,2147483647);
        exp_result.write(442,2147483647);
        exp_result.write(443,2147483647);
        exp_result.write(444,2147483647);
        exp_result.write(445,2147483647);
        exp_result.write(446,2147483647);
        exp_result.write(447,2147483647);
        exp_result.write(448,2147483647);
        exp_result.write(449,2147483647);
        exp_result.write(450,2147483647);
        exp_result.write(451,2147483647);
        exp_result.write(452,2147483647);
        exp_result.write(453,2147483647);
        exp_result.write(454,2147483647);
        exp_result.write(455,2147483647);
        exp_result.write(456,2147483647);
        exp_result.write(457,2147483647);
        exp_result.write(458,2147483647);
        exp_result.write(459,2147483647);
        exp_result.write(460,2147483647);
        exp_result.write(461,2147483647);
        exp_result.write(462,2147483647);
        exp_result.write(463,2147483647);
        exp_result.write(464,2147483647);
        exp_result.write(465,2147483647);
        exp_result.write(466,2147483647);
        exp_result.write(467,2147483647);
        exp_result.write(468,2147483647);
        exp_result.write(469,2147483647);
        exp_result.write(470,2147483647);
        exp_result.write(471,2147483647);
        exp_result.write(472,2147483647);
        exp_result.write(473,2147483647);
        exp_result.write(474,2147483647);
        exp_result.write(475,2147483647);
        exp_result.write(476,2147483647);
        exp_result.write(477,2147483647);
        exp_result.write(478,2147483647);
        exp_result.write(479,2147483647);
        exp_result.write(480,2147483647);
        exp_result.write(481,2147483647);
        exp_result.write(482,2147483647);
        exp_result.write(483,2147483647);
        exp_result.write(484,2147483647);
        exp_result.write(485,2147483647);
        exp_result.write(486,2147483647);
        exp_result.write(487,2147483647);
        exp_result.write(488,2147483647);
        exp_result.write(489,2147483647);
        exp_result.write(490,2147483647);
        exp_result.write(491,2147483647);
        exp_result.write(492,2147483647);
        exp_result.write(493,2147483647);
        exp_result.write(494,2147483647);
        exp_result.write(495,2147483647);
        exp_result.write(496,2147483647);
        exp_result.write(497,2147483647);
        exp_result.write(498,2147483647);
        exp_result.write(499,2147483647);
        exp_result.write(500,2147483647);
        exp_result.write(501,2147483647);
        exp_result.write(502,2147483647);
        exp_result.write(503,2147483647);
        exp_result.write(504,2147483647);
        exp_result.write(505,2147483647);
        exp_result.write(506,2147483647);
        exp_result.write(507,2147483647);
        exp_result.write(508,2147483647);
        exp_result.write(509,2147483647);
        exp_result.write(510,2147483647);
        exp_result.write(511,2147483647);
        exp_result.write(512,2147483647);
        exp_result.write(513,256);
        exp_result.write(514,256);
        exp_result.write(515,256);
        exp_result.write(516,256);
        exp_result.write(517,256);
        exp_result.write(518,256);
        exp_result.write(519,256);
        exp_result.write(520,256);
        exp_result.write(521,256);
        exp_result.write(522,256);
        exp_result.write(523,256);
        exp_result.write(524,256);
        exp_result.write(525,256);
        exp_result.write(526,256);
        exp_result.write(527,256);
        exp_result.write(528,256);
        exp_result.write(529,256);
        exp_result.write(530,256);
        exp_result.write(531,256);
        exp_result.write(532,256);
        exp_result.write(533,256);
        exp_result.write(534,256);
        exp_result.write(535,256);
        exp_result.write(536,256);
        exp_result.write(537,256);
        exp_result.write(538,256);
        exp_result.write(539,256);
        exp_result.write(540,256);
        exp_result.write(541,256);
        exp_result.write(542,256);
        exp_result.write(543,256);
        exp_result.write(544,256);
        exp_result.write(545,256);
        exp_result.write(546,256);
        exp_result.write(547,256);
        exp_result.write(548,256);
        exp_result.write(549,256);
        exp_result.write(550,256);
        exp_result.write(551,256);
        exp_result.write(552,256);
        exp_result.write(553,256);
        exp_result.write(554,256);
        exp_result.write(555,256);
        exp_result.write(556,256);
        exp_result.write(557,256);
        exp_result.write(558,256);
        exp_result.write(559,256);
        exp_result.write(560,256);
        exp_result.write(561,256);
        exp_result.write(562,256);
        exp_result.write(563,256);
        exp_result.write(564,256);
        exp_result.write(565,256);
        exp_result.write(566,256);
        exp_result.write(567,256);
        exp_result.write(568,256);
        exp_result.write(569,256);
        exp_result.write(570,256);
        exp_result.write(571,256);
        exp_result.write(572,256);
        exp_result.write(573,256);
        exp_result.write(574,256);
        exp_result.write(575,256);
        exp_result.write(576,256);
        exp_result.write(577,256);
        exp_result.write(578,256);
        exp_result.write(579,256);
        exp_result.write(580,256);
        exp_result.write(581,256);
        exp_result.write(582,256);
        exp_result.write(583,256);
        exp_result.write(584,256);
        exp_result.write(585,256);
        exp_result.write(586,256);
        exp_result.write(587,256);
        exp_result.write(588,256);
        exp_result.write(589,256);
        exp_result.write(590,256);
        exp_result.write(591,256);
        exp_result.write(592,256);
        exp_result.write(593,256);
        exp_result.write(594,256);
        exp_result.write(595,256);
        exp_result.write(596,256);
        exp_result.write(597,256);
        exp_result.write(598,256);
        exp_result.write(599,256);
        exp_result.write(600,256);
        exp_result.write(601,256);
        exp_result.write(602,256);
        exp_result.write(603,256);
        exp_result.write(604,256);
        exp_result.write(605,256);
        exp_result.write(606,256);
        exp_result.write(607,256);
        exp_result.write(608,256);
        exp_result.write(609,256);
        exp_result.write(610,256);
        exp_result.write(611,256);
        exp_result.write(612,256);
        exp_result.write(613,256);
        exp_result.write(614,256);
        exp_result.write(615,256);
        exp_result.write(616,256);
        exp_result.write(617,256);
        exp_result.write(618,256);
        exp_result.write(619,256);
        exp_result.write(620,256);
        exp_result.write(621,256);
        exp_result.write(622,256);
        exp_result.write(623,256);
        exp_result.write(624,256);
        exp_result.write(625,256);
        exp_result.write(626,256);
        exp_result.write(627,256);
        exp_result.write(628,256);
        exp_result.write(629,256);
        exp_result.write(630,256);
        exp_result.write(631,256);
        exp_result.write(632,256);
        exp_result.write(633,256);
        exp_result.write(634,256);
        exp_result.write(635,256);
        exp_result.write(636,256);
        exp_result.write(637,256);
        exp_result.write(638,256);
        exp_result.write(639,256);
        exp_result.write(640,256);
        exp_result.write(641,256);
        exp_result.write(642,256);
        exp_result.write(643,256);
        exp_result.write(644,256);
        exp_result.write(645,256);
        exp_result.write(646,256);
        exp_result.write(647,256);
        exp_result.write(648,256);
        exp_result.write(649,256);
        exp_result.write(650,256);
        exp_result.write(651,256);
        exp_result.write(652,256);
        exp_result.write(653,256);
        exp_result.write(654,256);
        exp_result.write(655,256);
        exp_result.write(656,256);
        exp_result.write(657,256);
        exp_result.write(658,256);
        exp_result.write(659,256);
        exp_result.write(660,256);
        exp_result.write(661,256);
        exp_result.write(662,256);
        exp_result.write(663,256);
        exp_result.write(664,256);
        exp_result.write(665,256);
        exp_result.write(666,256);
        exp_result.write(667,256);
        exp_result.write(668,256);
        exp_result.write(669,256);
        exp_result.write(670,256);
        exp_result.write(671,256);
        exp_result.write(672,256);
        exp_result.write(673,256);
        exp_result.write(674,256);
        exp_result.write(675,256);
        exp_result.write(676,256);
        exp_result.write(677,256);
        exp_result.write(678,256);
        exp_result.write(679,256);
        exp_result.write(680,256);
        exp_result.write(681,256);
        exp_result.write(682,256);
        exp_result.write(683,256);
        exp_result.write(684,256);
        exp_result.write(685,256);
        exp_result.write(686,256);
        exp_result.write(687,256);
        exp_result.write(688,256);
        exp_result.write(689,256);
        exp_result.write(690,256);
        exp_result.write(691,256);
        exp_result.write(692,256);
        exp_result.write(693,256);
        exp_result.write(694,256);
        exp_result.write(695,256);
        exp_result.write(696,256);
        exp_result.write(697,256);
        exp_result.write(698,256);
        exp_result.write(699,256);
        exp_result.write(700,256);
        exp_result.write(701,256);
        exp_result.write(702,256);
        exp_result.write(703,256);
        exp_result.write(704,256);
        exp_result.write(705,256);
        exp_result.write(706,256);
        exp_result.write(707,256);
        exp_result.write(708,256);
        exp_result.write(709,256);
        exp_result.write(710,256);
        exp_result.write(711,256);
        exp_result.write(712,256);
        exp_result.write(713,256);
        exp_result.write(714,256);
        exp_result.write(715,256);
        exp_result.write(716,256);
        exp_result.write(717,256);
        exp_result.write(718,256);
        exp_result.write(719,256);
        exp_result.write(720,256);
        exp_result.write(721,256);
        exp_result.write(722,256);
        exp_result.write(723,256);
        exp_result.write(724,256);
        exp_result.write(725,256);
        exp_result.write(726,256);
        exp_result.write(727,256);
        exp_result.write(728,256);
        exp_result.write(729,256);
        exp_result.write(730,256);
        exp_result.write(731,256);
        exp_result.write(732,256);
        exp_result.write(733,256);
        exp_result.write(734,256);
        exp_result.write(735,256);
        exp_result.write(736,256);
        exp_result.write(737,256);
        exp_result.write(738,256);
        exp_result.write(739,256);
        exp_result.write(740,256);
        exp_result.write(741,256);
        exp_result.write(742,256);
        exp_result.write(743,256);
        exp_result.write(744,256);
        exp_result.write(745,256);
        exp_result.write(746,256);
        exp_result.write(747,256);
        exp_result.write(748,256);
        exp_result.write(749,256);
        exp_result.write(750,256);
        exp_result.write(751,256);
        exp_result.write(752,256);
        exp_result.write(753,256);
        exp_result.write(754,256);
        exp_result.write(755,256);
        exp_result.write(756,256);
        exp_result.write(757,256);
        exp_result.write(758,256);
        exp_result.write(759,256);
        exp_result.write(760,256);
        exp_result.write(761,256);
        exp_result.write(762,256);
        exp_result.write(763,256);
        exp_result.write(764,256);
        exp_result.write(765,256);
        exp_result.write(766,256);
        exp_result.write(767,256);
        exp_result.write(768,256);
        exp_result.write(769,256);
        exp_result.write(770,256);
        exp_result.write(771,256);
        exp_result.write(772,256);
        exp_result.write(773,256);
        exp_result.write(774,256);
        exp_result.write(775,256);
        exp_result.write(776,256);
        exp_result.write(777,256);
        exp_result.write(778,256);
        exp_result.write(779,256);
        exp_result.write(780,256);
        exp_result.write(781,256);
        exp_result.write(782,256);
        exp_result.write(783,256);
        exp_result.write(784,256);
        exp_result.write(785,256);
        exp_result.write(786,256);
        exp_result.write(787,256);
        exp_result.write(788,256);
        exp_result.write(789,256);
        exp_result.write(790,256);
        exp_result.write(791,256);
        exp_result.write(792,256);
        exp_result.write(793,256);
        exp_result.write(794,256);
        exp_result.write(795,256);
        exp_result.write(796,256);
        exp_result.write(797,256);
        exp_result.write(798,256);
        exp_result.write(799,256);
        exp_result.write(800,256);
        exp_result.write(801,256);
        exp_result.write(802,256);
        exp_result.write(803,256);
        exp_result.write(804,256);
        exp_result.write(805,256);
        exp_result.write(806,256);
        exp_result.write(807,256);
        exp_result.write(808,256);
        exp_result.write(809,256);
        exp_result.write(810,256);
        exp_result.write(811,256);
        exp_result.write(812,256);
        exp_result.write(813,256);
        exp_result.write(814,256);
        exp_result.write(815,256);
        exp_result.write(816,256);
        exp_result.write(817,256);
        exp_result.write(818,256);
        exp_result.write(819,256);
        exp_result.write(820,256);
        exp_result.write(821,256);
        exp_result.write(822,256);
        exp_result.write(823,256);
        exp_result.write(824,256);
        exp_result.write(825,256);
        exp_result.write(826,256);
        exp_result.write(827,256);
        exp_result.write(828,256);
        exp_result.write(829,256);
        exp_result.write(830,256);
        exp_result.write(831,256);
        exp_result.write(832,256);
        exp_result.write(833,256);
        exp_result.write(834,256);
        exp_result.write(835,256);
        exp_result.write(836,256);
        exp_result.write(837,256);
        exp_result.write(838,256);
        exp_result.write(839,256);
        exp_result.write(840,256);
        exp_result.write(841,256);
        exp_result.write(842,256);
        exp_result.write(843,256);
        exp_result.write(844,256);
        exp_result.write(845,256);
        exp_result.write(846,256);
        exp_result.write(847,256);
        exp_result.write(848,256);
        exp_result.write(849,256);
        exp_result.write(850,256);
        exp_result.write(851,256);
        exp_result.write(852,256);
        exp_result.write(853,256);
        exp_result.write(854,256);
        exp_result.write(855,256);
        exp_result.write(856,256);
        exp_result.write(857,256);
        exp_result.write(858,256);
        exp_result.write(859,256);
        exp_result.write(860,256);
        exp_result.write(861,256);
        exp_result.write(862,256);
        exp_result.write(863,256);
        exp_result.write(864,256);
        exp_result.write(865,256);
        exp_result.write(866,256);
        exp_result.write(867,256);
        exp_result.write(868,256);
        exp_result.write(869,256);
        exp_result.write(870,256);
        exp_result.write(871,256);
        exp_result.write(872,256);
        exp_result.write(873,256);
        exp_result.write(874,256);
        exp_result.write(875,256);
        exp_result.write(876,256);
        exp_result.write(877,256);
        exp_result.write(878,256);
        exp_result.write(879,256);
        exp_result.write(880,256);
        exp_result.write(881,256);
        exp_result.write(882,256);
        exp_result.write(883,256);
        exp_result.write(884,256);
        exp_result.write(885,256);
        exp_result.write(886,256);
        exp_result.write(887,256);
        exp_result.write(888,256);
        exp_result.write(889,256);
        exp_result.write(890,256);
        exp_result.write(891,256);
        exp_result.write(892,256);
        exp_result.write(893,256);
        exp_result.write(894,256);
        exp_result.write(895,256);
        exp_result.write(896,256);
        exp_result.write(897,256);
        exp_result.write(898,256);
        exp_result.write(899,256);
        exp_result.write(900,256);
        exp_result.write(901,256);
        exp_result.write(902,256);
        exp_result.write(903,256);
        exp_result.write(904,256);
        exp_result.write(905,256);
        exp_result.write(906,256);
        exp_result.write(907,256);
        exp_result.write(908,256);
        exp_result.write(909,256);
        exp_result.write(910,256);
        exp_result.write(911,256);
        exp_result.write(912,256);
        exp_result.write(913,256);
        exp_result.write(914,256);
        exp_result.write(915,256);
        exp_result.write(916,256);
        exp_result.write(917,256);
        exp_result.write(918,256);
        exp_result.write(919,256);
        exp_result.write(920,256);
        exp_result.write(921,256);
        exp_result.write(922,256);
        exp_result.write(923,256);
        exp_result.write(924,256);
        exp_result.write(925,256);
        exp_result.write(926,256);
        exp_result.write(927,256);
        exp_result.write(928,256);
        exp_result.write(929,256);
        exp_result.write(930,256);
        exp_result.write(931,256);
        exp_result.write(932,256);
        exp_result.write(933,256);
        exp_result.write(934,256);
        exp_result.write(935,256);
        exp_result.write(936,256);
        exp_result.write(937,256);
        exp_result.write(938,256);
        exp_result.write(939,256);
        exp_result.write(940,256);
        exp_result.write(941,256);
        exp_result.write(942,256);
        exp_result.write(943,256);
        exp_result.write(944,256);
        exp_result.write(945,256);
        exp_result.write(946,256);
        exp_result.write(947,256);
        exp_result.write(948,256);
        exp_result.write(949,256);
        exp_result.write(950,256);
        exp_result.write(951,256);
        exp_result.write(952,256);
        exp_result.write(953,256);
        exp_result.write(954,256);
        exp_result.write(955,256);
        exp_result.write(956,256);
        exp_result.write(957,256);
        exp_result.write(958,256);
        exp_result.write(959,256);
        exp_result.write(960,256);
        exp_result.write(961,256);
        exp_result.write(962,256);
        exp_result.write(963,256);
        exp_result.write(964,256);
        exp_result.write(965,256);
        exp_result.write(966,256);
        exp_result.write(967,256);
        exp_result.write(968,256);
        exp_result.write(969,256);
        exp_result.write(970,256);
        exp_result.write(971,256);
        exp_result.write(972,256);
        exp_result.write(973,256);
        exp_result.write(974,256);
        exp_result.write(975,256);
        exp_result.write(976,256);
        exp_result.write(977,256);
        exp_result.write(978,256);
        exp_result.write(979,256);
        exp_result.write(980,256);
        exp_result.write(981,256);
        exp_result.write(982,256);
        exp_result.write(983,256);
        exp_result.write(984,256);
        exp_result.write(985,256);
        exp_result.write(986,256);
        exp_result.write(987,256);
        exp_result.write(988,256);
        exp_result.write(989,256);
        exp_result.write(990,256);
        exp_result.write(991,256);
        exp_result.write(992,256);
        exp_result.write(993,256);
        exp_result.write(994,256);
        exp_result.write(995,256);
        exp_result.write(996,256);
        exp_result.write(997,256);
        exp_result.write(998,256);
        exp_result.write(999,256);
        exp_result.write(1000,256);
        exp_result.write(1001,256);
        exp_result.write(1002,256);
        exp_result.write(1003,256);
        exp_result.write(1004,256);
        exp_result.write(1005,256);
        exp_result.write(1006,256);
        exp_result.write(1007,256);
        exp_result.write(1008,256);
        exp_result.write(1009,256);
        exp_result.write(1010,256);
        exp_result.write(1011,256);
        exp_result.write(1012,256);
        exp_result.write(1013,256);
        exp_result.write(1014,256);
        exp_result.write(1015,256);
        exp_result.write(1016,256);
        exp_result.write(1017,256);
        exp_result.write(1018,256);
        exp_result.write(1019,256);
        exp_result.write(1020,256);
        exp_result.write(1021,256);
        exp_result.write(1022,256);
        exp_result.write(1023,256);
    }

    action cal_softmax1(){
        const bit<32> k = 0x00B5;// 根号dk分之一的Q8.8形式，具体实际的值是1 / math.sqrt(2)

        bit<16> q_mul16_kt_0_0;
        q_mul16_kt.read(q_mul16_kt_0_0,0);
        bit<32> q_mul32_kt_0_0 = (bit<32>) q_mul16_kt_0_0 | (((q_mul16_kt_0_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_0 = (q_mul32_kt_0_0 * k)[23:14];
        bit<16> q_mul16_kt_0_1;
        q_mul16_kt.read(q_mul16_kt_0_1,1);
        bit<32> q_mul32_kt_0_1 = (bit<32>) q_mul16_kt_0_1 | (((q_mul16_kt_0_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_1 = (q_mul32_kt_0_1 * k)[23:14];
        bit<16> q_mul16_kt_0_2;
        q_mul16_kt.read(q_mul16_kt_0_2,2);
        bit<32> q_mul32_kt_0_2 = (bit<32>) q_mul16_kt_0_2 | (((q_mul16_kt_0_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_2 = (q_mul32_kt_0_2 * k)[23:14];
        bit<16> q_mul16_kt_0_3;
        q_mul16_kt.read(q_mul16_kt_0_3,3);
        bit<32> q_mul32_kt_0_3 = (bit<32>) q_mul16_kt_0_3 | (((q_mul16_kt_0_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_3 = (q_mul32_kt_0_3 * k)[23:14];
        bit<16> q_mul16_kt_0_4;
        q_mul16_kt.read(q_mul16_kt_0_4,4);
        bit<32> q_mul32_kt_0_4 = (bit<32>) q_mul16_kt_0_4 | (((q_mul16_kt_0_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_4 = (q_mul32_kt_0_4 * k)[23:14];
        bit<16> q_mul16_kt_0_5;
        q_mul16_kt.read(q_mul16_kt_0_5,5);
        bit<32> q_mul32_kt_0_5 = (bit<32>) q_mul16_kt_0_5 | (((q_mul16_kt_0_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_5 = (q_mul32_kt_0_5 * k)[23:14];
        bit<16> q_mul16_kt_0_6;
        q_mul16_kt.read(q_mul16_kt_0_6,6);
        bit<32> q_mul32_kt_0_6 = (bit<32>) q_mul16_kt_0_6 | (((q_mul16_kt_0_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_6 = (q_mul32_kt_0_6 * k)[23:14];
        bit<16> q_mul16_kt_0_7;
        q_mul16_kt.read(q_mul16_kt_0_7,7);
        bit<32> q_mul32_kt_0_7 = (bit<32>) q_mul16_kt_0_7 | (((q_mul16_kt_0_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_0_7 = (q_mul32_kt_0_7 * k)[23:14];
        bit<16> q_mul16_kt_1_0;
        q_mul16_kt.read(q_mul16_kt_1_0,8);
        bit<32> q_mul32_kt_1_0 = (bit<32>) q_mul16_kt_1_0 | (((q_mul16_kt_1_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_0 = (q_mul32_kt_1_0 * k)[23:14];
        bit<16> q_mul16_kt_1_1;
        q_mul16_kt.read(q_mul16_kt_1_1,9);
        bit<32> q_mul32_kt_1_1 = (bit<32>) q_mul16_kt_1_1 | (((q_mul16_kt_1_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_1 = (q_mul32_kt_1_1 * k)[23:14];
        bit<16> q_mul16_kt_1_2;
        q_mul16_kt.read(q_mul16_kt_1_2,10);
        bit<32> q_mul32_kt_1_2 = (bit<32>) q_mul16_kt_1_2 | (((q_mul16_kt_1_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_2 = (q_mul32_kt_1_2 * k)[23:14];
        bit<16> q_mul16_kt_1_3;
        q_mul16_kt.read(q_mul16_kt_1_3,11);
        bit<32> q_mul32_kt_1_3 = (bit<32>) q_mul16_kt_1_3 | (((q_mul16_kt_1_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_3 = (q_mul32_kt_1_3 * k)[23:14];
        bit<16> q_mul16_kt_1_4;
        q_mul16_kt.read(q_mul16_kt_1_4,12);
        bit<32> q_mul32_kt_1_4 = (bit<32>) q_mul16_kt_1_4 | (((q_mul16_kt_1_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_4 = (q_mul32_kt_1_4 * k)[23:14];
        bit<16> q_mul16_kt_1_5;
        q_mul16_kt.read(q_mul16_kt_1_5,13);
        bit<32> q_mul32_kt_1_5 = (bit<32>) q_mul16_kt_1_5 | (((q_mul16_kt_1_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_5 = (q_mul32_kt_1_5 * k)[23:14];
        bit<16> q_mul16_kt_1_6;
        q_mul16_kt.read(q_mul16_kt_1_6,14);
        bit<32> q_mul32_kt_1_6 = (bit<32>) q_mul16_kt_1_6 | (((q_mul16_kt_1_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_6 = (q_mul32_kt_1_6 * k)[23:14];
        bit<16> q_mul16_kt_1_7;
        q_mul16_kt.read(q_mul16_kt_1_7,15);
        bit<32> q_mul32_kt_1_7 = (bit<32>) q_mul16_kt_1_7 | (((q_mul16_kt_1_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_1_7 = (q_mul32_kt_1_7 * k)[23:14];
        bit<16> q_mul16_kt_2_0;
        q_mul16_kt.read(q_mul16_kt_2_0,16);
        bit<32> q_mul32_kt_2_0 = (bit<32>) q_mul16_kt_2_0 | (((q_mul16_kt_2_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_0 = (q_mul32_kt_2_0 * k)[23:14];
        bit<16> q_mul16_kt_2_1;
        q_mul16_kt.read(q_mul16_kt_2_1,17);
        bit<32> q_mul32_kt_2_1 = (bit<32>) q_mul16_kt_2_1 | (((q_mul16_kt_2_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_1 = (q_mul32_kt_2_1 * k)[23:14];
        bit<16> q_mul16_kt_2_2;
        q_mul16_kt.read(q_mul16_kt_2_2,18);
        bit<32> q_mul32_kt_2_2 = (bit<32>) q_mul16_kt_2_2 | (((q_mul16_kt_2_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_2 = (q_mul32_kt_2_2 * k)[23:14];
        bit<16> q_mul16_kt_2_3;
        q_mul16_kt.read(q_mul16_kt_2_3,19);
        bit<32> q_mul32_kt_2_3 = (bit<32>) q_mul16_kt_2_3 | (((q_mul16_kt_2_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_3 = (q_mul32_kt_2_3 * k)[23:14];
        bit<16> q_mul16_kt_2_4;
        q_mul16_kt.read(q_mul16_kt_2_4,20);
        bit<32> q_mul32_kt_2_4 = (bit<32>) q_mul16_kt_2_4 | (((q_mul16_kt_2_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_4 = (q_mul32_kt_2_4 * k)[23:14];
        bit<16> q_mul16_kt_2_5;
        q_mul16_kt.read(q_mul16_kt_2_5,21);
        bit<32> q_mul32_kt_2_5 = (bit<32>) q_mul16_kt_2_5 | (((q_mul16_kt_2_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_5 = (q_mul32_kt_2_5 * k)[23:14];
        bit<16> q_mul16_kt_2_6;
        q_mul16_kt.read(q_mul16_kt_2_6,22);
        bit<32> q_mul32_kt_2_6 = (bit<32>) q_mul16_kt_2_6 | (((q_mul16_kt_2_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_6 = (q_mul32_kt_2_6 * k)[23:14];
        bit<16> q_mul16_kt_2_7;
        q_mul16_kt.read(q_mul16_kt_2_7,23);
        bit<32> q_mul32_kt_2_7 = (bit<32>) q_mul16_kt_2_7 | (((q_mul16_kt_2_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_2_7 = (q_mul32_kt_2_7 * k)[23:14];
        bit<16> q_mul16_kt_3_0;
        q_mul16_kt.read(q_mul16_kt_3_0,24);
        bit<32> q_mul32_kt_3_0 = (bit<32>) q_mul16_kt_3_0 | (((q_mul16_kt_3_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_0 = (q_mul32_kt_3_0 * k)[23:14];
        bit<16> q_mul16_kt_3_1;
        q_mul16_kt.read(q_mul16_kt_3_1,25);
        bit<32> q_mul32_kt_3_1 = (bit<32>) q_mul16_kt_3_1 | (((q_mul16_kt_3_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_1 = (q_mul32_kt_3_1 * k)[23:14];
        bit<16> q_mul16_kt_3_2;
        q_mul16_kt.read(q_mul16_kt_3_2,26);
        bit<32> q_mul32_kt_3_2 = (bit<32>) q_mul16_kt_3_2 | (((q_mul16_kt_3_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_2 = (q_mul32_kt_3_2 * k)[23:14];
        bit<16> q_mul16_kt_3_3;
        q_mul16_kt.read(q_mul16_kt_3_3,27);
        bit<32> q_mul32_kt_3_3 = (bit<32>) q_mul16_kt_3_3 | (((q_mul16_kt_3_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_3 = (q_mul32_kt_3_3 * k)[23:14];
        bit<16> q_mul16_kt_3_4;
        q_mul16_kt.read(q_mul16_kt_3_4,28);
        bit<32> q_mul32_kt_3_4 = (bit<32>) q_mul16_kt_3_4 | (((q_mul16_kt_3_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_4 = (q_mul32_kt_3_4 * k)[23:14];
        bit<16> q_mul16_kt_3_5;
        q_mul16_kt.read(q_mul16_kt_3_5,29);
        bit<32> q_mul32_kt_3_5 = (bit<32>) q_mul16_kt_3_5 | (((q_mul16_kt_3_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_5 = (q_mul32_kt_3_5 * k)[23:14];
        bit<16> q_mul16_kt_3_6;
        q_mul16_kt.read(q_mul16_kt_3_6,30);
        bit<32> q_mul32_kt_3_6 = (bit<32>) q_mul16_kt_3_6 | (((q_mul16_kt_3_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_6 = (q_mul32_kt_3_6 * k)[23:14];
        bit<16> q_mul16_kt_3_7;
        q_mul16_kt.read(q_mul16_kt_3_7,31);
        bit<32> q_mul32_kt_3_7 = (bit<32>) q_mul16_kt_3_7 | (((q_mul16_kt_3_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_3_7 = (q_mul32_kt_3_7 * k)[23:14];
        bit<16> q_mul16_kt_4_0;
        q_mul16_kt.read(q_mul16_kt_4_0,32);
        bit<32> q_mul32_kt_4_0 = (bit<32>) q_mul16_kt_4_0 | (((q_mul16_kt_4_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_0 = (q_mul32_kt_4_0 * k)[23:14];
        bit<16> q_mul16_kt_4_1;
        q_mul16_kt.read(q_mul16_kt_4_1,33);
        bit<32> q_mul32_kt_4_1 = (bit<32>) q_mul16_kt_4_1 | (((q_mul16_kt_4_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_1 = (q_mul32_kt_4_1 * k)[23:14];
        bit<16> q_mul16_kt_4_2;
        q_mul16_kt.read(q_mul16_kt_4_2,34);
        bit<32> q_mul32_kt_4_2 = (bit<32>) q_mul16_kt_4_2 | (((q_mul16_kt_4_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_2 = (q_mul32_kt_4_2 * k)[23:14];
        bit<16> q_mul16_kt_4_3;
        q_mul16_kt.read(q_mul16_kt_4_3,35);
        bit<32> q_mul32_kt_4_3 = (bit<32>) q_mul16_kt_4_3 | (((q_mul16_kt_4_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_3 = (q_mul32_kt_4_3 * k)[23:14];
        bit<16> q_mul16_kt_4_4;
        q_mul16_kt.read(q_mul16_kt_4_4,36);
        bit<32> q_mul32_kt_4_4 = (bit<32>) q_mul16_kt_4_4 | (((q_mul16_kt_4_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_4 = (q_mul32_kt_4_4 * k)[23:14];
        bit<16> q_mul16_kt_4_5;
        q_mul16_kt.read(q_mul16_kt_4_5,37);
        bit<32> q_mul32_kt_4_5 = (bit<32>) q_mul16_kt_4_5 | (((q_mul16_kt_4_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_5 = (q_mul32_kt_4_5 * k)[23:14];
        bit<16> q_mul16_kt_4_6;
        q_mul16_kt.read(q_mul16_kt_4_6,38);
        bit<32> q_mul32_kt_4_6 = (bit<32>) q_mul16_kt_4_6 | (((q_mul16_kt_4_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_6 = (q_mul32_kt_4_6 * k)[23:14];
        bit<16> q_mul16_kt_4_7;
        q_mul16_kt.read(q_mul16_kt_4_7,39);
        bit<32> q_mul32_kt_4_7 = (bit<32>) q_mul16_kt_4_7 | (((q_mul16_kt_4_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_4_7 = (q_mul32_kt_4_7 * k)[23:14];
        bit<16> q_mul16_kt_5_0;
        q_mul16_kt.read(q_mul16_kt_5_0,40);
        bit<32> q_mul32_kt_5_0 = (bit<32>) q_mul16_kt_5_0 | (((q_mul16_kt_5_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_0 = (q_mul32_kt_5_0 * k)[23:14];
        bit<16> q_mul16_kt_5_1;
        q_mul16_kt.read(q_mul16_kt_5_1,41);
        bit<32> q_mul32_kt_5_1 = (bit<32>) q_mul16_kt_5_1 | (((q_mul16_kt_5_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_1 = (q_mul32_kt_5_1 * k)[23:14];
        bit<16> q_mul16_kt_5_2;
        q_mul16_kt.read(q_mul16_kt_5_2,42);
        bit<32> q_mul32_kt_5_2 = (bit<32>) q_mul16_kt_5_2 | (((q_mul16_kt_5_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_2 = (q_mul32_kt_5_2 * k)[23:14];
        bit<16> q_mul16_kt_5_3;
        q_mul16_kt.read(q_mul16_kt_5_3,43);
        bit<32> q_mul32_kt_5_3 = (bit<32>) q_mul16_kt_5_3 | (((q_mul16_kt_5_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_3 = (q_mul32_kt_5_3 * k)[23:14];
        bit<16> q_mul16_kt_5_4;
        q_mul16_kt.read(q_mul16_kt_5_4,44);
        bit<32> q_mul32_kt_5_4 = (bit<32>) q_mul16_kt_5_4 | (((q_mul16_kt_5_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_4 = (q_mul32_kt_5_4 * k)[23:14];
        bit<16> q_mul16_kt_5_5;
        q_mul16_kt.read(q_mul16_kt_5_5,45);
        bit<32> q_mul32_kt_5_5 = (bit<32>) q_mul16_kt_5_5 | (((q_mul16_kt_5_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_5 = (q_mul32_kt_5_5 * k)[23:14];
        bit<16> q_mul16_kt_5_6;
        q_mul16_kt.read(q_mul16_kt_5_6,46);
        bit<32> q_mul32_kt_5_6 = (bit<32>) q_mul16_kt_5_6 | (((q_mul16_kt_5_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_6 = (q_mul32_kt_5_6 * k)[23:14];
        bit<16> q_mul16_kt_5_7;
        q_mul16_kt.read(q_mul16_kt_5_7,47);
        bit<32> q_mul32_kt_5_7 = (bit<32>) q_mul16_kt_5_7 | (((q_mul16_kt_5_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_5_7 = (q_mul32_kt_5_7 * k)[23:14];
        bit<16> q_mul16_kt_6_0;
        q_mul16_kt.read(q_mul16_kt_6_0,48);
        bit<32> q_mul32_kt_6_0 = (bit<32>) q_mul16_kt_6_0 | (((q_mul16_kt_6_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_0 = (q_mul32_kt_6_0 * k)[23:14];
        bit<16> q_mul16_kt_6_1;
        q_mul16_kt.read(q_mul16_kt_6_1,49);
        bit<32> q_mul32_kt_6_1 = (bit<32>) q_mul16_kt_6_1 | (((q_mul16_kt_6_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_1 = (q_mul32_kt_6_1 * k)[23:14];
        bit<16> q_mul16_kt_6_2;
        q_mul16_kt.read(q_mul16_kt_6_2,50);
        bit<32> q_mul32_kt_6_2 = (bit<32>) q_mul16_kt_6_2 | (((q_mul16_kt_6_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_2 = (q_mul32_kt_6_2 * k)[23:14];
        bit<16> q_mul16_kt_6_3;
        q_mul16_kt.read(q_mul16_kt_6_3,51);
        bit<32> q_mul32_kt_6_3 = (bit<32>) q_mul16_kt_6_3 | (((q_mul16_kt_6_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_3 = (q_mul32_kt_6_3 * k)[23:14];
        bit<16> q_mul16_kt_6_4;
        q_mul16_kt.read(q_mul16_kt_6_4,52);
        bit<32> q_mul32_kt_6_4 = (bit<32>) q_mul16_kt_6_4 | (((q_mul16_kt_6_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_4 = (q_mul32_kt_6_4 * k)[23:14];
        bit<16> q_mul16_kt_6_5;
        q_mul16_kt.read(q_mul16_kt_6_5,53);
        bit<32> q_mul32_kt_6_5 = (bit<32>) q_mul16_kt_6_5 | (((q_mul16_kt_6_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_5 = (q_mul32_kt_6_5 * k)[23:14];
        bit<16> q_mul16_kt_6_6;
        q_mul16_kt.read(q_mul16_kt_6_6,54);
        bit<32> q_mul32_kt_6_6 = (bit<32>) q_mul16_kt_6_6 | (((q_mul16_kt_6_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_6 = (q_mul32_kt_6_6 * k)[23:14];
        bit<16> q_mul16_kt_6_7;
        q_mul16_kt.read(q_mul16_kt_6_7,55);
        bit<32> q_mul32_kt_6_7 = (bit<32>) q_mul16_kt_6_7 | (((q_mul16_kt_6_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_6_7 = (q_mul32_kt_6_7 * k)[23:14];
        bit<16> q_mul16_kt_7_0;
        q_mul16_kt.read(q_mul16_kt_7_0,56);
        bit<32> q_mul32_kt_7_0 = (bit<32>) q_mul16_kt_7_0 | (((q_mul16_kt_7_0 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_0 = (q_mul32_kt_7_0 * k)[23:14];
        bit<16> q_mul16_kt_7_1;
        q_mul16_kt.read(q_mul16_kt_7_1,57);
        bit<32> q_mul32_kt_7_1 = (bit<32>) q_mul16_kt_7_1 | (((q_mul16_kt_7_1 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_1 = (q_mul32_kt_7_1 * k)[23:14];
        bit<16> q_mul16_kt_7_2;
        q_mul16_kt.read(q_mul16_kt_7_2,58);
        bit<32> q_mul32_kt_7_2 = (bit<32>) q_mul16_kt_7_2 | (((q_mul16_kt_7_2 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_2 = (q_mul32_kt_7_2 * k)[23:14];
        bit<16> q_mul16_kt_7_3;
        q_mul16_kt.read(q_mul16_kt_7_3,59);
        bit<32> q_mul32_kt_7_3 = (bit<32>) q_mul16_kt_7_3 | (((q_mul16_kt_7_3 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_3 = (q_mul32_kt_7_3 * k)[23:14];
        bit<16> q_mul16_kt_7_4;
        q_mul16_kt.read(q_mul16_kt_7_4,60);
        bit<32> q_mul32_kt_7_4 = (bit<32>) q_mul16_kt_7_4 | (((q_mul16_kt_7_4 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_4 = (q_mul32_kt_7_4 * k)[23:14];
        bit<16> q_mul16_kt_7_5;
        q_mul16_kt.read(q_mul16_kt_7_5,61);
        bit<32> q_mul32_kt_7_5 = (bit<32>) q_mul16_kt_7_5 | (((q_mul16_kt_7_5 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_5 = (q_mul32_kt_7_5 * k)[23:14];
        bit<16> q_mul16_kt_7_6;
        q_mul16_kt.read(q_mul16_kt_7_6,62);
        bit<32> q_mul32_kt_7_6 = (bit<32>) q_mul16_kt_7_6 | (((q_mul16_kt_7_6 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_6 = (q_mul32_kt_7_6 * k)[23:14];
        bit<16> q_mul16_kt_7_7;
        q_mul16_kt.read(q_mul16_kt_7_7,63);
        bit<32> q_mul32_kt_7_7 = (bit<32>) q_mul16_kt_7_7 | (((q_mul16_kt_7_7 & 0x8000) != 0) ? 32w0xFFFF0000 : 0);
        bit<10> q_mul10_kt_7_7 = (q_mul32_kt_7_7 * k)[23:14];

        // 由于read方法的定义void read(out T result, in bit<32> index)的index是32位，
        // 所以这里我们需要将q_mul16_kt_0_0的值转换为32位
        bit<32> exp_index_0_0;
        exp_index_0_0[9:0] = q_mul10_kt_0_0;
        bit<32> exp_index_0_1;
        exp_index_0_1[9:0] = q_mul10_kt_0_1;
        bit<32> exp_index_0_2;
        exp_index_0_2[9:0] = q_mul10_kt_0_2;
        bit<32> exp_index_0_3;
        exp_index_0_3[9:0] = q_mul10_kt_0_3;
        bit<32> exp_index_0_4;
        exp_index_0_4[9:0] = q_mul10_kt_0_4;
        bit<32> exp_index_0_5;
        exp_index_0_5[9:0] = q_mul10_kt_0_5;
        bit<32> exp_index_0_6;
        exp_index_0_6[9:0] = q_mul10_kt_0_6;
        bit<32> exp_index_0_7;
        exp_index_0_7[9:0] = q_mul10_kt_0_7;
        bit<32> exp_index_1_0;
        exp_index_1_0[9:0] = q_mul10_kt_1_0;
        bit<32> exp_index_1_1;
        exp_index_1_1[9:0] = q_mul10_kt_1_1;
        bit<32> exp_index_1_2;
        exp_index_1_2[9:0] = q_mul10_kt_1_2;
        bit<32> exp_index_1_3;
        exp_index_1_3[9:0] = q_mul10_kt_1_3;
        bit<32> exp_index_1_4;
        exp_index_1_4[9:0] = q_mul10_kt_1_4;
        bit<32> exp_index_1_5;
        exp_index_1_5[9:0] = q_mul10_kt_1_5;
        bit<32> exp_index_1_6;
        exp_index_1_6[9:0] = q_mul10_kt_1_6;
        bit<32> exp_index_1_7;
        exp_index_1_7[9:0] = q_mul10_kt_1_7;
        bit<32> exp_index_2_0;
        exp_index_2_0[9:0] = q_mul10_kt_2_0;
        bit<32> exp_index_2_1;
        exp_index_2_1[9:0] = q_mul10_kt_2_1;
        bit<32> exp_index_2_2;
        exp_index_2_2[9:0] = q_mul10_kt_2_2;
        bit<32> exp_index_2_3;
        exp_index_2_3[9:0] = q_mul10_kt_2_3;
        bit<32> exp_index_2_4;
        exp_index_2_4[9:0] = q_mul10_kt_2_4;
        bit<32> exp_index_2_5;
        exp_index_2_5[9:0] = q_mul10_kt_2_5;
        bit<32> exp_index_2_6;
        exp_index_2_6[9:0] = q_mul10_kt_2_6;
        bit<32> exp_index_2_7;
        exp_index_2_7[9:0] = q_mul10_kt_2_7;
        bit<32> exp_index_3_0;
        exp_index_3_0[9:0] = q_mul10_kt_3_0;
        bit<32> exp_index_3_1;
        exp_index_3_1[9:0] = q_mul10_kt_3_1;
        bit<32> exp_index_3_2;
        exp_index_3_2[9:0] = q_mul10_kt_3_2;
        bit<32> exp_index_3_3;
        exp_index_3_3[9:0] = q_mul10_kt_3_3;
        bit<32> exp_index_3_4;
        exp_index_3_4[9:0] = q_mul10_kt_3_4;
        bit<32> exp_index_3_5;
        exp_index_3_5[9:0] = q_mul10_kt_3_5;
        bit<32> exp_index_3_6;
        exp_index_3_6[9:0] = q_mul10_kt_3_6;
        bit<32> exp_index_3_7;
        exp_index_3_7[9:0] = q_mul10_kt_3_7;
        bit<32> exp_index_4_0;
        exp_index_4_0[9:0] = q_mul10_kt_4_0;
        bit<32> exp_index_4_1;
        exp_index_4_1[9:0] = q_mul10_kt_4_1;
        bit<32> exp_index_4_2;
        exp_index_4_2[9:0] = q_mul10_kt_4_2;
        bit<32> exp_index_4_3;
        exp_index_4_3[9:0] = q_mul10_kt_4_3;
        bit<32> exp_index_4_4;
        exp_index_4_4[9:0] = q_mul10_kt_4_4;
        bit<32> exp_index_4_5;
        exp_index_4_5[9:0] = q_mul10_kt_4_5;
        bit<32> exp_index_4_6;
        exp_index_4_6[9:0] = q_mul10_kt_4_6;
        bit<32> exp_index_4_7;
        exp_index_4_7[9:0] = q_mul10_kt_4_7;
        bit<32> exp_index_5_0;
        exp_index_5_0[9:0] = q_mul10_kt_5_0;
        bit<32> exp_index_5_1;
        exp_index_5_1[9:0] = q_mul10_kt_5_1;
        bit<32> exp_index_5_2;
        exp_index_5_2[9:0] = q_mul10_kt_5_2;
        bit<32> exp_index_5_3;
        exp_index_5_3[9:0] = q_mul10_kt_5_3;
        bit<32> exp_index_5_4;
        exp_index_5_4[9:0] = q_mul10_kt_5_4;
        bit<32> exp_index_5_5;
        exp_index_5_5[9:0] = q_mul10_kt_5_5;
        bit<32> exp_index_5_6;
        exp_index_5_6[9:0] = q_mul10_kt_5_6;
        bit<32> exp_index_5_7;
        exp_index_5_7[9:0] = q_mul10_kt_5_7;
        bit<32> exp_index_6_0;
        exp_index_6_0[9:0] = q_mul10_kt_6_0;
        bit<32> exp_index_6_1;
        exp_index_6_1[9:0] = q_mul10_kt_6_1;
        bit<32> exp_index_6_2;
        exp_index_6_2[9:0] = q_mul10_kt_6_2;
        bit<32> exp_index_6_3;
        exp_index_6_3[9:0] = q_mul10_kt_6_3;
        bit<32> exp_index_6_4;
        exp_index_6_4[9:0] = q_mul10_kt_6_4;
        bit<32> exp_index_6_5;
        exp_index_6_5[9:0] = q_mul10_kt_6_5;
        bit<32> exp_index_6_6;
        exp_index_6_6[9:0] = q_mul10_kt_6_6;
        bit<32> exp_index_6_7;
        exp_index_6_7[9:0] = q_mul10_kt_6_7;
        bit<32> exp_index_7_0;
        exp_index_7_0[9:0] = q_mul10_kt_7_0;
        bit<32> exp_index_7_1;
        exp_index_7_1[9:0] = q_mul10_kt_7_1;
        bit<32> exp_index_7_2;
        exp_index_7_2[9:0] = q_mul10_kt_7_2;
        bit<32> exp_index_7_3;
        exp_index_7_3[9:0] = q_mul10_kt_7_3;
        bit<32> exp_index_7_4;
        exp_index_7_4[9:0] = q_mul10_kt_7_4;
        bit<32> exp_index_7_5;
        exp_index_7_5[9:0] = q_mul10_kt_7_5;
        bit<32> exp_index_7_6;
        exp_index_7_6[9:0] = q_mul10_kt_7_6;
        bit<32> exp_index_7_7;
        exp_index_7_7[9:0] = q_mul10_kt_7_7;

        // 通过查寄存器的方法实现求exp
        exp_result.read(meta.q_mul_kt_0_0,exp_index_0_0);
        exp_result.read(meta.q_mul_kt_0_1,exp_index_0_1);
        exp_result.read(meta.q_mul_kt_0_2,exp_index_0_2);
        exp_result.read(meta.q_mul_kt_0_3,exp_index_0_3);
        exp_result.read(meta.q_mul_kt_0_4,exp_index_0_4);
        exp_result.read(meta.q_mul_kt_0_5,exp_index_0_5);
        exp_result.read(meta.q_mul_kt_0_6,exp_index_0_6);
        exp_result.read(meta.q_mul_kt_0_7,exp_index_0_7);
        exp_result.read(meta.q_mul_kt_1_0,exp_index_1_0);
        exp_result.read(meta.q_mul_kt_1_1,exp_index_1_1);
        exp_result.read(meta.q_mul_kt_1_2,exp_index_1_2);
        exp_result.read(meta.q_mul_kt_1_3,exp_index_1_3);
        exp_result.read(meta.q_mul_kt_1_4,exp_index_1_4);
        exp_result.read(meta.q_mul_kt_1_5,exp_index_1_5);
        exp_result.read(meta.q_mul_kt_1_6,exp_index_1_6);
        exp_result.read(meta.q_mul_kt_1_7,exp_index_1_7);
        exp_result.read(meta.q_mul_kt_2_0,exp_index_2_0);
        exp_result.read(meta.q_mul_kt_2_1,exp_index_2_1);
        exp_result.read(meta.q_mul_kt_2_2,exp_index_2_2);
        exp_result.read(meta.q_mul_kt_2_3,exp_index_2_3);
        exp_result.read(meta.q_mul_kt_2_4,exp_index_2_4);
        exp_result.read(meta.q_mul_kt_2_5,exp_index_2_5);
        exp_result.read(meta.q_mul_kt_2_6,exp_index_2_6);
        exp_result.read(meta.q_mul_kt_2_7,exp_index_2_7);
        exp_result.read(meta.q_mul_kt_3_0,exp_index_3_0);
        exp_result.read(meta.q_mul_kt_3_1,exp_index_3_1);
        exp_result.read(meta.q_mul_kt_3_2,exp_index_3_2);
        exp_result.read(meta.q_mul_kt_3_3,exp_index_3_3);
        exp_result.read(meta.q_mul_kt_3_4,exp_index_3_4);
        exp_result.read(meta.q_mul_kt_3_5,exp_index_3_5);
        exp_result.read(meta.q_mul_kt_3_6,exp_index_3_6);
        exp_result.read(meta.q_mul_kt_3_7,exp_index_3_7);
        exp_result.read(meta.q_mul_kt_4_0,exp_index_4_0);
        exp_result.read(meta.q_mul_kt_4_1,exp_index_4_1);
        exp_result.read(meta.q_mul_kt_4_2,exp_index_4_2);
        exp_result.read(meta.q_mul_kt_4_3,exp_index_4_3);
        exp_result.read(meta.q_mul_kt_4_4,exp_index_4_4);
        exp_result.read(meta.q_mul_kt_4_5,exp_index_4_5);
        exp_result.read(meta.q_mul_kt_4_6,exp_index_4_6);
        exp_result.read(meta.q_mul_kt_4_7,exp_index_4_7);
        exp_result.read(meta.q_mul_kt_5_0,exp_index_5_0);
        exp_result.read(meta.q_mul_kt_5_1,exp_index_5_1);
        exp_result.read(meta.q_mul_kt_5_2,exp_index_5_2);
        exp_result.read(meta.q_mul_kt_5_3,exp_index_5_3);
        exp_result.read(meta.q_mul_kt_5_4,exp_index_5_4);
        exp_result.read(meta.q_mul_kt_5_5,exp_index_5_5);
        exp_result.read(meta.q_mul_kt_5_6,exp_index_5_6);
        exp_result.read(meta.q_mul_kt_5_7,exp_index_5_7);
        exp_result.read(meta.q_mul_kt_6_0,exp_index_6_0);
        exp_result.read(meta.q_mul_kt_6_1,exp_index_6_1);
        exp_result.read(meta.q_mul_kt_6_2,exp_index_6_2);
        exp_result.read(meta.q_mul_kt_6_3,exp_index_6_3);
        exp_result.read(meta.q_mul_kt_6_4,exp_index_6_4);
        exp_result.read(meta.q_mul_kt_6_5,exp_index_6_5);
        exp_result.read(meta.q_mul_kt_6_6,exp_index_6_6);
        exp_result.read(meta.q_mul_kt_6_7,exp_index_6_7);
        exp_result.read(meta.q_mul_kt_7_0,exp_index_7_0);
        exp_result.read(meta.q_mul_kt_7_1,exp_index_7_1);
        exp_result.read(meta.q_mul_kt_7_2,exp_index_7_2);
        exp_result.read(meta.q_mul_kt_7_3,exp_index_7_3);
        exp_result.read(meta.q_mul_kt_7_4,exp_index_7_4);
        exp_result.read(meta.q_mul_kt_7_5,exp_index_7_5);
        exp_result.read(meta.q_mul_kt_7_6,exp_index_7_6);
        exp_result.read(meta.q_mul_kt_7_7,exp_index_7_7);

        // softmax前求每一行总和
        meta.softmax_sum_0 = meta.q_mul_kt_0_0 + meta.q_mul_kt_0_1 + meta.q_mul_kt_0_2 + meta.q_mul_kt_0_3 + meta.q_mul_kt_0_4 + meta.q_mul_kt_0_5 + meta.q_mul_kt_0_6 + meta.q_mul_kt_0_7;
        meta.softmax_sum_1 = meta.q_mul_kt_1_0 + meta.q_mul_kt_1_1 + meta.q_mul_kt_1_2 + meta.q_mul_kt_1_3 + meta.q_mul_kt_1_4 + meta.q_mul_kt_1_5 + meta.q_mul_kt_1_6 + meta.q_mul_kt_1_7;
        meta.softmax_sum_2 = meta.q_mul_kt_2_0 + meta.q_mul_kt_2_1 + meta.q_mul_kt_2_2 + meta.q_mul_kt_2_3 + meta.q_mul_kt_2_4 + meta.q_mul_kt_2_5 + meta.q_mul_kt_2_6 + meta.q_mul_kt_2_7;
        meta.softmax_sum_3 = meta.q_mul_kt_3_0 + meta.q_mul_kt_3_1 + meta.q_mul_kt_3_2 + meta.q_mul_kt_3_3 + meta.q_mul_kt_3_4 + meta.q_mul_kt_3_5 + meta.q_mul_kt_3_6 + meta.q_mul_kt_3_7;
        meta.softmax_sum_4 = meta.q_mul_kt_4_0 + meta.q_mul_kt_4_1 + meta.q_mul_kt_4_2 + meta.q_mul_kt_4_3 + meta.q_mul_kt_4_4 + meta.q_mul_kt_4_5 + meta.q_mul_kt_4_6 + meta.q_mul_kt_4_7;
        meta.softmax_sum_5 = meta.q_mul_kt_5_0 + meta.q_mul_kt_5_1 + meta.q_mul_kt_5_2 + meta.q_mul_kt_5_3 + meta.q_mul_kt_5_4 + meta.q_mul_kt_5_5 + meta.q_mul_kt_5_6 + meta.q_mul_kt_5_7;
        meta.softmax_sum_6 = meta.q_mul_kt_6_0 + meta.q_mul_kt_6_1 + meta.q_mul_kt_6_2 + meta.q_mul_kt_6_3 + meta.q_mul_kt_6_4 + meta.q_mul_kt_6_5 + meta.q_mul_kt_6_6 + meta.q_mul_kt_6_7;
        meta.softmax_sum_7 = meta.q_mul_kt_7_0 + meta.q_mul_kt_7_1 + meta.q_mul_kt_7_2 + meta.q_mul_kt_7_3 + meta.q_mul_kt_7_4 + meta.q_mul_kt_7_5 + meta.q_mul_kt_7_6 + meta.q_mul_kt_7_7;
    }

    action cal_softmax2() {
        // exp是一个可能较大的数字，这里我们把结果的32位扩展成64位
        bit<64> q_mul_kt_0_0 = (bit<64>) meta.q_mul_kt_0_0 | (((meta.q_mul_kt_0_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_1 = (bit<64>) meta.q_mul_kt_0_1 | (((meta.q_mul_kt_0_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_2 = (bit<64>) meta.q_mul_kt_0_2 | (((meta.q_mul_kt_0_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_3 = (bit<64>) meta.q_mul_kt_0_3 | (((meta.q_mul_kt_0_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_4 = (bit<64>) meta.q_mul_kt_0_4 | (((meta.q_mul_kt_0_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_5 = (bit<64>) meta.q_mul_kt_0_5 | (((meta.q_mul_kt_0_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_6 = (bit<64>) meta.q_mul_kt_0_6 | (((meta.q_mul_kt_0_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_0_7 = (bit<64>) meta.q_mul_kt_0_7 | (((meta.q_mul_kt_0_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_0 = (bit<64>) meta.q_mul_kt_1_0 | (((meta.q_mul_kt_1_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_1 = (bit<64>) meta.q_mul_kt_1_1 | (((meta.q_mul_kt_1_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_2 = (bit<64>) meta.q_mul_kt_1_2 | (((meta.q_mul_kt_1_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_3 = (bit<64>) meta.q_mul_kt_1_3 | (((meta.q_mul_kt_1_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_4 = (bit<64>) meta.q_mul_kt_1_4 | (((meta.q_mul_kt_1_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_5 = (bit<64>) meta.q_mul_kt_1_5 | (((meta.q_mul_kt_1_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_6 = (bit<64>) meta.q_mul_kt_1_6 | (((meta.q_mul_kt_1_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_1_7 = (bit<64>) meta.q_mul_kt_1_7 | (((meta.q_mul_kt_1_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_0 = (bit<64>) meta.q_mul_kt_2_0 | (((meta.q_mul_kt_2_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_1 = (bit<64>) meta.q_mul_kt_2_1 | (((meta.q_mul_kt_2_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_2 = (bit<64>) meta.q_mul_kt_2_2 | (((meta.q_mul_kt_2_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_3 = (bit<64>) meta.q_mul_kt_2_3 | (((meta.q_mul_kt_2_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_4 = (bit<64>) meta.q_mul_kt_2_4 | (((meta.q_mul_kt_2_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_5 = (bit<64>) meta.q_mul_kt_2_5 | (((meta.q_mul_kt_2_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_6 = (bit<64>) meta.q_mul_kt_2_6 | (((meta.q_mul_kt_2_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_2_7 = (bit<64>) meta.q_mul_kt_2_7 | (((meta.q_mul_kt_2_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_0 = (bit<64>) meta.q_mul_kt_3_0 | (((meta.q_mul_kt_3_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_1 = (bit<64>) meta.q_mul_kt_3_1 | (((meta.q_mul_kt_3_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_2 = (bit<64>) meta.q_mul_kt_3_2 | (((meta.q_mul_kt_3_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_3 = (bit<64>) meta.q_mul_kt_3_3 | (((meta.q_mul_kt_3_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_4 = (bit<64>) meta.q_mul_kt_3_4 | (((meta.q_mul_kt_3_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_5 = (bit<64>) meta.q_mul_kt_3_5 | (((meta.q_mul_kt_3_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_6 = (bit<64>) meta.q_mul_kt_3_6 | (((meta.q_mul_kt_3_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_3_7 = (bit<64>) meta.q_mul_kt_3_7 | (((meta.q_mul_kt_3_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_0 = (bit<64>) meta.q_mul_kt_4_0 | (((meta.q_mul_kt_4_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_1 = (bit<64>) meta.q_mul_kt_4_1 | (((meta.q_mul_kt_4_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_2 = (bit<64>) meta.q_mul_kt_4_2 | (((meta.q_mul_kt_4_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_3 = (bit<64>) meta.q_mul_kt_4_3 | (((meta.q_mul_kt_4_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_4 = (bit<64>) meta.q_mul_kt_4_4 | (((meta.q_mul_kt_4_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_5 = (bit<64>) meta.q_mul_kt_4_5 | (((meta.q_mul_kt_4_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_6 = (bit<64>) meta.q_mul_kt_4_6 | (((meta.q_mul_kt_4_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_4_7 = (bit<64>) meta.q_mul_kt_4_7 | (((meta.q_mul_kt_4_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_0 = (bit<64>) meta.q_mul_kt_5_0 | (((meta.q_mul_kt_5_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_1 = (bit<64>) meta.q_mul_kt_5_1 | (((meta.q_mul_kt_5_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_2 = (bit<64>) meta.q_mul_kt_5_2 | (((meta.q_mul_kt_5_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_3 = (bit<64>) meta.q_mul_kt_5_3 | (((meta.q_mul_kt_5_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_4 = (bit<64>) meta.q_mul_kt_5_4 | (((meta.q_mul_kt_5_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_5 = (bit<64>) meta.q_mul_kt_5_5 | (((meta.q_mul_kt_5_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_6 = (bit<64>) meta.q_mul_kt_5_6 | (((meta.q_mul_kt_5_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_5_7 = (bit<64>) meta.q_mul_kt_5_7 | (((meta.q_mul_kt_5_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_0 = (bit<64>) meta.q_mul_kt_6_0 | (((meta.q_mul_kt_6_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_1 = (bit<64>) meta.q_mul_kt_6_1 | (((meta.q_mul_kt_6_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_2 = (bit<64>) meta.q_mul_kt_6_2 | (((meta.q_mul_kt_6_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_3 = (bit<64>) meta.q_mul_kt_6_3 | (((meta.q_mul_kt_6_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_4 = (bit<64>) meta.q_mul_kt_6_4 | (((meta.q_mul_kt_6_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_5 = (bit<64>) meta.q_mul_kt_6_5 | (((meta.q_mul_kt_6_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_6 = (bit<64>) meta.q_mul_kt_6_6 | (((meta.q_mul_kt_6_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_6_7 = (bit<64>) meta.q_mul_kt_6_7 | (((meta.q_mul_kt_6_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_0 = (bit<64>) meta.q_mul_kt_7_0 | (((meta.q_mul_kt_7_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_1 = (bit<64>) meta.q_mul_kt_7_1 | (((meta.q_mul_kt_7_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_2 = (bit<64>) meta.q_mul_kt_7_2 | (((meta.q_mul_kt_7_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_3 = (bit<64>) meta.q_mul_kt_7_3 | (((meta.q_mul_kt_7_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_4 = (bit<64>) meta.q_mul_kt_7_4 | (((meta.q_mul_kt_7_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_5 = (bit<64>) meta.q_mul_kt_7_5 | (((meta.q_mul_kt_7_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_6 = (bit<64>) meta.q_mul_kt_7_6 | (((meta.q_mul_kt_7_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> q_mul_kt_7_7 = (bit<64>) meta.q_mul_kt_7_7 | (((meta.q_mul_kt_7_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);

        // 同理，32位->64位
        bit<64> softmax_reciprocal_0 = (bit<64>) meta.softmax_reciprocal_0 | (((meta.softmax_reciprocal_0 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_1 = (bit<64>) meta.softmax_reciprocal_1 | (((meta.softmax_reciprocal_1 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_2 = (bit<64>) meta.softmax_reciprocal_2 | (((meta.softmax_reciprocal_2 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_3 = (bit<64>) meta.softmax_reciprocal_3 | (((meta.softmax_reciprocal_3 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_4 = (bit<64>) meta.softmax_reciprocal_4 | (((meta.softmax_reciprocal_4 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_5 = (bit<64>) meta.softmax_reciprocal_5 | (((meta.softmax_reciprocal_5 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_6 = (bit<64>) meta.softmax_reciprocal_6 | (((meta.softmax_reciprocal_6 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);
        bit<64> softmax_reciprocal_7 = (bit<64>) meta.softmax_reciprocal_7 | (((meta.softmax_reciprocal_7 & 0x80000000) != 0) ? 64w0xFFFFFFFF00000000 : 0);

        bit<64> softmax64_0_0 = q_mul_kt_0_0 * softmax_reciprocal_0;
        bit<64> softmax64_0_1 = q_mul_kt_0_1 * softmax_reciprocal_0;
        bit<64> softmax64_0_2 = q_mul_kt_0_2 * softmax_reciprocal_0;
        bit<64> softmax64_0_3 = q_mul_kt_0_3 * softmax_reciprocal_0;
        bit<64> softmax64_0_4 = q_mul_kt_0_4 * softmax_reciprocal_0;
        bit<64> softmax64_0_5 = q_mul_kt_0_5 * softmax_reciprocal_0;
        bit<64> softmax64_0_6 = q_mul_kt_0_6 * softmax_reciprocal_0;
        bit<64> softmax64_0_7 = q_mul_kt_0_7 * softmax_reciprocal_0;
        bit<64> softmax64_1_0 = q_mul_kt_1_0 * softmax_reciprocal_1;
        bit<64> softmax64_1_1 = q_mul_kt_1_1 * softmax_reciprocal_1;
        bit<64> softmax64_1_2 = q_mul_kt_1_2 * softmax_reciprocal_1;
        bit<64> softmax64_1_3 = q_mul_kt_1_3 * softmax_reciprocal_1;
        bit<64> softmax64_1_4 = q_mul_kt_1_4 * softmax_reciprocal_1;
        bit<64> softmax64_1_5 = q_mul_kt_1_5 * softmax_reciprocal_1;
        bit<64> softmax64_1_6 = q_mul_kt_1_6 * softmax_reciprocal_1;
        bit<64> softmax64_1_7 = q_mul_kt_1_7 * softmax_reciprocal_1;
        bit<64> softmax64_2_0 = q_mul_kt_2_0 * softmax_reciprocal_2;
        bit<64> softmax64_2_1 = q_mul_kt_2_1 * softmax_reciprocal_2;
        bit<64> softmax64_2_2 = q_mul_kt_2_2 * softmax_reciprocal_2;
        bit<64> softmax64_2_3 = q_mul_kt_2_3 * softmax_reciprocal_2;
        bit<64> softmax64_2_4 = q_mul_kt_2_4 * softmax_reciprocal_2;
        bit<64> softmax64_2_5 = q_mul_kt_2_5 * softmax_reciprocal_2;
        bit<64> softmax64_2_6 = q_mul_kt_2_6 * softmax_reciprocal_2;
        bit<64> softmax64_2_7 = q_mul_kt_2_7 * softmax_reciprocal_2;
        bit<64> softmax64_3_0 = q_mul_kt_3_0 * softmax_reciprocal_3;
        bit<64> softmax64_3_1 = q_mul_kt_3_1 * softmax_reciprocal_3;
        bit<64> softmax64_3_2 = q_mul_kt_3_2 * softmax_reciprocal_3;
        bit<64> softmax64_3_3 = q_mul_kt_3_3 * softmax_reciprocal_3;
        bit<64> softmax64_3_4 = q_mul_kt_3_4 * softmax_reciprocal_3;
        bit<64> softmax64_3_5 = q_mul_kt_3_5 * softmax_reciprocal_3;
        bit<64> softmax64_3_6 = q_mul_kt_3_6 * softmax_reciprocal_3;
        bit<64> softmax64_3_7 = q_mul_kt_3_7 * softmax_reciprocal_3;
        bit<64> softmax64_4_0 = q_mul_kt_4_0 * softmax_reciprocal_4;
        bit<64> softmax64_4_1 = q_mul_kt_4_1 * softmax_reciprocal_4;
        bit<64> softmax64_4_2 = q_mul_kt_4_2 * softmax_reciprocal_4;
        bit<64> softmax64_4_3 = q_mul_kt_4_3 * softmax_reciprocal_4;
        bit<64> softmax64_4_4 = q_mul_kt_4_4 * softmax_reciprocal_4;
        bit<64> softmax64_4_5 = q_mul_kt_4_5 * softmax_reciprocal_4;
        bit<64> softmax64_4_6 = q_mul_kt_4_6 * softmax_reciprocal_4;
        bit<64> softmax64_4_7 = q_mul_kt_4_7 * softmax_reciprocal_4;
        bit<64> softmax64_5_0 = q_mul_kt_5_0 * softmax_reciprocal_5;
        bit<64> softmax64_5_1 = q_mul_kt_5_1 * softmax_reciprocal_5;
        bit<64> softmax64_5_2 = q_mul_kt_5_2 * softmax_reciprocal_5;
        bit<64> softmax64_5_3 = q_mul_kt_5_3 * softmax_reciprocal_5;
        bit<64> softmax64_5_4 = q_mul_kt_5_4 * softmax_reciprocal_5;
        bit<64> softmax64_5_5 = q_mul_kt_5_5 * softmax_reciprocal_5;
        bit<64> softmax64_5_6 = q_mul_kt_5_6 * softmax_reciprocal_5;
        bit<64> softmax64_5_7 = q_mul_kt_5_7 * softmax_reciprocal_5;
        bit<64> softmax64_6_0 = q_mul_kt_6_0 * softmax_reciprocal_6;
        bit<64> softmax64_6_1 = q_mul_kt_6_1 * softmax_reciprocal_6;
        bit<64> softmax64_6_2 = q_mul_kt_6_2 * softmax_reciprocal_6;
        bit<64> softmax64_6_3 = q_mul_kt_6_3 * softmax_reciprocal_6;
        bit<64> softmax64_6_4 = q_mul_kt_6_4 * softmax_reciprocal_6;
        bit<64> softmax64_6_5 = q_mul_kt_6_5 * softmax_reciprocal_6;
        bit<64> softmax64_6_6 = q_mul_kt_6_6 * softmax_reciprocal_6;
        bit<64> softmax64_6_7 = q_mul_kt_6_7 * softmax_reciprocal_6;
        bit<64> softmax64_7_0 = q_mul_kt_7_0 * softmax_reciprocal_7;
        bit<64> softmax64_7_1 = q_mul_kt_7_1 * softmax_reciprocal_7;
        bit<64> softmax64_7_2 = q_mul_kt_7_2 * softmax_reciprocal_7;
        bit<64> softmax64_7_3 = q_mul_kt_7_3 * softmax_reciprocal_7;
        bit<64> softmax64_7_4 = q_mul_kt_7_4 * softmax_reciprocal_7;
        bit<64> softmax64_7_5 = q_mul_kt_7_5 * softmax_reciprocal_7;
        bit<64> softmax64_7_6 = q_mul_kt_7_6 * softmax_reciprocal_7;
        bit<64> softmax64_7_7 = q_mul_kt_7_7 * softmax_reciprocal_7;

        bit<32> softmax_0_0 = softmax64_0_0[39:8];
        bit<32> softmax_0_1 = softmax64_0_1[39:8];
        bit<32> softmax_0_2 = softmax64_0_2[39:8];
        bit<32> softmax_0_3 = softmax64_0_3[39:8];
        bit<32> softmax_0_4 = softmax64_0_4[39:8];
        bit<32> softmax_0_5 = softmax64_0_5[39:8];
        bit<32> softmax_0_6 = softmax64_0_6[39:8];
        bit<32> softmax_0_7 = softmax64_0_7[39:8];
        bit<32> softmax_1_0 = softmax64_1_0[39:8];
        bit<32> softmax_1_1 = softmax64_1_1[39:8];
        bit<32> softmax_1_2 = softmax64_1_2[39:8];
        bit<32> softmax_1_3 = softmax64_1_3[39:8];
        bit<32> softmax_1_4 = softmax64_1_4[39:8];
        bit<32> softmax_1_5 = softmax64_1_5[39:8];
        bit<32> softmax_1_6 = softmax64_1_6[39:8];
        bit<32> softmax_1_7 = softmax64_1_7[39:8];
        bit<32> softmax_2_0 = softmax64_2_0[39:8];
        bit<32> softmax_2_1 = softmax64_2_1[39:8];
        bit<32> softmax_2_2 = softmax64_2_2[39:8];
        bit<32> softmax_2_3 = softmax64_2_3[39:8];
        bit<32> softmax_2_4 = softmax64_2_4[39:8];
        bit<32> softmax_2_5 = softmax64_2_5[39:8];
        bit<32> softmax_2_6 = softmax64_2_6[39:8];
        bit<32> softmax_2_7 = softmax64_2_7[39:8];
        bit<32> softmax_3_0 = softmax64_3_0[39:8];
        bit<32> softmax_3_1 = softmax64_3_1[39:8];
        bit<32> softmax_3_2 = softmax64_3_2[39:8];
        bit<32> softmax_3_3 = softmax64_3_3[39:8];
        bit<32> softmax_3_4 = softmax64_3_4[39:8];
        bit<32> softmax_3_5 = softmax64_3_5[39:8];
        bit<32> softmax_3_6 = softmax64_3_6[39:8];
        bit<32> softmax_3_7 = softmax64_3_7[39:8];
        bit<32> softmax_4_0 = softmax64_4_0[39:8];
        bit<32> softmax_4_1 = softmax64_4_1[39:8];
        bit<32> softmax_4_2 = softmax64_4_2[39:8];
        bit<32> softmax_4_3 = softmax64_4_3[39:8];
        bit<32> softmax_4_4 = softmax64_4_4[39:8];
        bit<32> softmax_4_5 = softmax64_4_5[39:8];
        bit<32> softmax_4_6 = softmax64_4_6[39:8];
        bit<32> softmax_4_7 = softmax64_4_7[39:8];
        bit<32> softmax_5_0 = softmax64_5_0[39:8];
        bit<32> softmax_5_1 = softmax64_5_1[39:8];
        bit<32> softmax_5_2 = softmax64_5_2[39:8];
        bit<32> softmax_5_3 = softmax64_5_3[39:8];
        bit<32> softmax_5_4 = softmax64_5_4[39:8];
        bit<32> softmax_5_5 = softmax64_5_5[39:8];
        bit<32> softmax_5_6 = softmax64_5_6[39:8];
        bit<32> softmax_5_7 = softmax64_5_7[39:8];
        bit<32> softmax_6_0 = softmax64_6_0[39:8];
        bit<32> softmax_6_1 = softmax64_6_1[39:8];
        bit<32> softmax_6_2 = softmax64_6_2[39:8];
        bit<32> softmax_6_3 = softmax64_6_3[39:8];
        bit<32> softmax_6_4 = softmax64_6_4[39:8];
        bit<32> softmax_6_5 = softmax64_6_5[39:8];
        bit<32> softmax_6_6 = softmax64_6_6[39:8];
        bit<32> softmax_6_7 = softmax64_6_7[39:8];
        bit<32> softmax_7_0 = softmax64_7_0[39:8];
        bit<32> softmax_7_1 = softmax64_7_1[39:8];
        bit<32> softmax_7_2 = softmax64_7_2[39:8];
        bit<32> softmax_7_3 = softmax64_7_3[39:8];
        bit<32> softmax_7_4 = softmax64_7_4[39:8];
        bit<32> softmax_7_5 = softmax64_7_5[39:8];
        bit<32> softmax_7_6 = softmax64_7_6[39:8];
        bit<32> softmax_7_7 = softmax64_7_7[39:8];

        softmax_value.write(0,softmax_0_0);
        softmax_value.write(1,softmax_0_1);
        softmax_value.write(2,softmax_0_2);
        softmax_value.write(3,softmax_0_3);
        softmax_value.write(4,softmax_0_4);
        softmax_value.write(5,softmax_0_5);
        softmax_value.write(6,softmax_0_6);
        softmax_value.write(7,softmax_0_7);
        softmax_value.write(8,softmax_1_0);
        softmax_value.write(9,softmax_1_1);
        softmax_value.write(10,softmax_1_2);
        softmax_value.write(11,softmax_1_3);
        softmax_value.write(12,softmax_1_4);
        softmax_value.write(13,softmax_1_5);
        softmax_value.write(14,softmax_1_6);
        softmax_value.write(15,softmax_1_7);
        softmax_value.write(16,softmax_2_0);
        softmax_value.write(17,softmax_2_1);
        softmax_value.write(18,softmax_2_2);
        softmax_value.write(19,softmax_2_3);
        softmax_value.write(20,softmax_2_4);
        softmax_value.write(21,softmax_2_5);
        softmax_value.write(22,softmax_2_6);
        softmax_value.write(23,softmax_2_7);
        softmax_value.write(24,softmax_3_0);
        softmax_value.write(25,softmax_3_1);
        softmax_value.write(26,softmax_3_2);
        softmax_value.write(27,softmax_3_3);
        softmax_value.write(28,softmax_3_4);
        softmax_value.write(29,softmax_3_5);
        softmax_value.write(30,softmax_3_6);
        softmax_value.write(31,softmax_3_7);
        softmax_value.write(32,softmax_4_0);
        softmax_value.write(33,softmax_4_1);
        softmax_value.write(34,softmax_4_2);
        softmax_value.write(35,softmax_4_3);
        softmax_value.write(36,softmax_4_4);
        softmax_value.write(37,softmax_4_5);
        softmax_value.write(38,softmax_4_6);
        softmax_value.write(39,softmax_4_7);
        softmax_value.write(40,softmax_5_0);
        softmax_value.write(41,softmax_5_1);
        softmax_value.write(42,softmax_5_2);
        softmax_value.write(43,softmax_5_3);
        softmax_value.write(44,softmax_5_4);
        softmax_value.write(45,softmax_5_5);
        softmax_value.write(46,softmax_5_6);
        softmax_value.write(47,softmax_5_7);
        softmax_value.write(48,softmax_6_0);
        softmax_value.write(49,softmax_6_1);
        softmax_value.write(50,softmax_6_2);
        softmax_value.write(51,softmax_6_3);
        softmax_value.write(52,softmax_6_4);
        softmax_value.write(53,softmax_6_5);
        softmax_value.write(54,softmax_6_6);
        softmax_value.write(55,softmax_6_7);
        softmax_value.write(56,softmax_7_0);
        softmax_value.write(57,softmax_7_1);
        softmax_value.write(58,softmax_7_2);
        softmax_value.write(59,softmax_7_3);
        softmax_value.write(60,softmax_7_4);
        softmax_value.write(61,softmax_7_5);
        softmax_value.write(62,softmax_7_6);
        softmax_value.write(63,softmax_7_7);
    }

    action operation_send(){
        bit<32> softmax_0_0;
        bit<32> softmax_0_1;
        bit<32> softmax_0_2;
        bit<32> softmax_0_3;
        bit<32> softmax_0_4;
        bit<32> softmax_0_5;
        bit<32> softmax_0_6;
        bit<32> softmax_0_7;
        bit<32> softmax_1_0;
        bit<32> softmax_1_1;
        bit<32> softmax_1_2;
        bit<32> softmax_1_3;
        bit<32> softmax_1_4;
        bit<32> softmax_1_5;
        bit<32> softmax_1_6;
        bit<32> softmax_1_7;
        bit<32> softmax_2_0;
        bit<32> softmax_2_1;
        bit<32> softmax_2_2;
        bit<32> softmax_2_3;
        bit<32> softmax_2_4;
        bit<32> softmax_2_5;
        bit<32> softmax_2_6;
        bit<32> softmax_2_7;
        bit<32> softmax_3_0;
        bit<32> softmax_3_1;
        bit<32> softmax_3_2;
        bit<32> softmax_3_3;
        bit<32> softmax_3_4;
        bit<32> softmax_3_5;
        bit<32> softmax_3_6;
        bit<32> softmax_3_7;
        bit<32> softmax_4_0;
        bit<32> softmax_4_1;
        bit<32> softmax_4_2;
        bit<32> softmax_4_3;
        bit<32> softmax_4_4;
        bit<32> softmax_4_5;
        bit<32> softmax_4_6;
        bit<32> softmax_4_7;
        bit<32> softmax_5_0;
        bit<32> softmax_5_1;
        bit<32> softmax_5_2;
        bit<32> softmax_5_3;
        bit<32> softmax_5_4;
        bit<32> softmax_5_5;
        bit<32> softmax_5_6;
        bit<32> softmax_5_7;
        bit<32> softmax_6_0;
        bit<32> softmax_6_1;
        bit<32> softmax_6_2;
        bit<32> softmax_6_3;
        bit<32> softmax_6_4;
        bit<32> softmax_6_5;
        bit<32> softmax_6_6;
        bit<32> softmax_6_7;
        bit<32> softmax_7_0;
        bit<32> softmax_7_1;
        bit<32> softmax_7_2;
        bit<32> softmax_7_3;
        bit<32> softmax_7_4;
        bit<32> softmax_7_5;
        bit<32> softmax_7_6;
        bit<32> softmax_7_7;

        bit<32> v_0_0;
        bit<32> v_0_1;
        bit<32> v_0_2;
        bit<32> v_1_0;
        bit<32> v_1_1;
        bit<32> v_1_2;
        bit<32> v_2_0;
        bit<32> v_2_1;
        bit<32> v_2_2;
        bit<32> v_3_0;
        bit<32> v_3_1;
        bit<32> v_3_2;
        bit<32> v_4_0;
        bit<32> v_4_1;
        bit<32> v_4_2;
        bit<32> v_5_0;
        bit<32> v_5_1;
        bit<32> v_5_2;
        bit<32> v_6_0;
        bit<32> v_6_1;
        bit<32> v_6_2;
        bit<32> v_7_0;
        bit<32> v_7_1;
        bit<32> v_7_2;

        softmax_value.read(softmax_0_0 , 0);
        softmax_value.read(softmax_0_1 , 1);
        softmax_value.read(softmax_0_2 , 2);
        softmax_value.read(softmax_0_3 , 3);
        softmax_value.read(softmax_0_4 , 4);
        softmax_value.read(softmax_0_5 , 5);
        softmax_value.read(softmax_0_6 , 6);
        softmax_value.read(softmax_0_7 , 7);
        softmax_value.read(softmax_1_0 , 8);
        softmax_value.read(softmax_1_1 , 9);
        softmax_value.read(softmax_1_2 , 10);
        softmax_value.read(softmax_1_3 , 11);
        softmax_value.read(softmax_1_4 , 12);
        softmax_value.read(softmax_1_5 , 13);
        softmax_value.read(softmax_1_6 , 14);
        softmax_value.read(softmax_1_7 , 15);
        softmax_value.read(softmax_2_0 , 16);
        softmax_value.read(softmax_2_1 , 17);
        softmax_value.read(softmax_2_2 , 18);
        softmax_value.read(softmax_2_3 , 19);
        softmax_value.read(softmax_2_4 , 20);
        softmax_value.read(softmax_2_5 , 21);
        softmax_value.read(softmax_2_6 , 22);
        softmax_value.read(softmax_2_7 , 23);
        softmax_value.read(softmax_3_0 , 24);
        softmax_value.read(softmax_3_1 , 25);
        softmax_value.read(softmax_3_2 , 26);
        softmax_value.read(softmax_3_3 , 27);
        softmax_value.read(softmax_3_4 , 28);
        softmax_value.read(softmax_3_5 , 29);
        softmax_value.read(softmax_3_6 , 30);
        softmax_value.read(softmax_3_7 , 31);
        softmax_value.read(softmax_4_0 , 32);
        softmax_value.read(softmax_4_1 , 33);
        softmax_value.read(softmax_4_2 , 34);
        softmax_value.read(softmax_4_3 , 35);
        softmax_value.read(softmax_4_4 , 36);
        softmax_value.read(softmax_4_5 , 37);
        softmax_value.read(softmax_4_6 , 38);
        softmax_value.read(softmax_4_7 , 39);
        softmax_value.read(softmax_5_0 , 40);
        softmax_value.read(softmax_5_1 , 41);
        softmax_value.read(softmax_5_2 , 42);
        softmax_value.read(softmax_5_3 , 43);
        softmax_value.read(softmax_5_4 , 44);
        softmax_value.read(softmax_5_5 , 45);
        softmax_value.read(softmax_5_6 , 46);
        softmax_value.read(softmax_5_7 , 47);
        softmax_value.read(softmax_6_0 , 48);
        softmax_value.read(softmax_6_1 , 49);
        softmax_value.read(softmax_6_2 , 50);
        softmax_value.read(softmax_6_3 , 51);
        softmax_value.read(softmax_6_4 , 52);
        softmax_value.read(softmax_6_5 , 53);
        softmax_value.read(softmax_6_6 , 54);
        softmax_value.read(softmax_6_7 , 55);
        softmax_value.read(softmax_7_0 , 56);
        softmax_value.read(softmax_7_1 , 57);
        softmax_value.read(softmax_7_2 , 58);
        softmax_value.read(softmax_7_3 , 59);
        softmax_value.read(softmax_7_4 , 60);
        softmax_value.read(softmax_7_5 , 61);
        softmax_value.read(softmax_7_6 , 62);
        softmax_value.read(softmax_7_7 , 63);

        v_value.read(v_0_0, 0);
        v_value.read(v_0_1, 1);
        v_value.read(v_0_2, 2);
        v_value.read(v_1_0, 3);
        v_value.read(v_1_1, 4);
        v_value.read(v_1_2, 5);
        v_value.read(v_2_0, 6);
        v_value.read(v_2_1, 7);
        v_value.read(v_2_2, 8);
        v_value.read(v_3_0, 9);
        v_value.read(v_3_1, 10);
        v_value.read(v_3_2, 11);
        v_value.read(v_4_0, 12);
        v_value.read(v_4_1, 13);
        v_value.read(v_4_2, 14);
        v_value.read(v_5_0, 15);
        v_value.read(v_5_1, 16);
        v_value.read(v_5_2, 17);
        v_value.read(v_6_0, 18);
        v_value.read(v_6_1, 19);
        v_value.read(v_6_2, 20);
        v_value.read(v_7_0, 21);
        v_value.read(v_7_1, 22);
        v_value.read(v_7_2, 23);

        hdr.s1_output0_calc.s1_output_0_0 = (softmax_0_0 * v_0_0 + softmax_0_1 * v_1_0 + softmax_0_2 * v_2_0 + softmax_0_3 * v_3_0 + softmax_0_4 * v_4_0 + softmax_0_5 * v_5_0 + softmax_0_6 * v_6_0 + softmax_0_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_0_1 = (softmax_0_0 * v_0_1 + softmax_0_1 * v_1_1 + softmax_0_2 * v_2_1 + softmax_0_3 * v_3_1 + softmax_0_4 * v_4_1 + softmax_0_5 * v_5_1 + softmax_0_6 * v_6_1 + softmax_0_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_0_2 = (softmax_0_0 * v_0_2 + softmax_0_1 * v_1_2 + softmax_0_2 * v_2_2 + softmax_0_3 * v_3_2 + softmax_0_4 * v_4_2 + softmax_0_5 * v_5_2 + softmax_0_6 * v_6_2 + softmax_0_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_1_0 = (softmax_1_0 * v_0_0 + softmax_1_1 * v_1_0 + softmax_1_2 * v_2_0 + softmax_1_3 * v_3_0 + softmax_1_4 * v_4_0 + softmax_1_5 * v_5_0 + softmax_1_6 * v_6_0 + softmax_1_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_1_1 = (softmax_1_0 * v_0_1 + softmax_1_1 * v_1_1 + softmax_1_2 * v_2_1 + softmax_1_3 * v_3_1 + softmax_1_4 * v_4_1 + softmax_1_5 * v_5_1 + softmax_1_6 * v_6_1 + softmax_1_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_1_2 = (softmax_1_0 * v_0_2 + softmax_1_1 * v_1_2 + softmax_1_2 * v_2_2 + softmax_1_3 * v_3_2 + softmax_1_4 * v_4_2 + softmax_1_5 * v_5_2 + softmax_1_6 * v_6_2 + softmax_1_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_2_0 = (softmax_2_0 * v_0_0 + softmax_2_1 * v_1_0 + softmax_2_2 * v_2_0 + softmax_2_3 * v_3_0 + softmax_2_4 * v_4_0 + softmax_2_5 * v_5_0 + softmax_2_6 * v_6_0 + softmax_2_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_2_1 = (softmax_2_0 * v_0_1 + softmax_2_1 * v_1_1 + softmax_2_2 * v_2_1 + softmax_2_3 * v_3_1 + softmax_2_4 * v_4_1 + softmax_2_5 * v_5_1 + softmax_2_6 * v_6_1 + softmax_2_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_2_2 = (softmax_2_0 * v_0_2 + softmax_2_1 * v_1_2 + softmax_2_2 * v_2_2 + softmax_2_3 * v_3_2 + softmax_2_4 * v_4_2 + softmax_2_5 * v_5_2 + softmax_2_6 * v_6_2 + softmax_2_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_3_0 = (softmax_3_0 * v_0_0 + softmax_3_1 * v_1_0 + softmax_3_2 * v_2_0 + softmax_3_3 * v_3_0 + softmax_3_4 * v_4_0 + softmax_3_5 * v_5_0 + softmax_3_6 * v_6_0 + softmax_3_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_3_1 = (softmax_3_0 * v_0_1 + softmax_3_1 * v_1_1 + softmax_3_2 * v_2_1 + softmax_3_3 * v_3_1 + softmax_3_4 * v_4_1 + softmax_3_5 * v_5_1 + softmax_3_6 * v_6_1 + softmax_3_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_3_2 = (softmax_3_0 * v_0_2 + softmax_3_1 * v_1_2 + softmax_3_2 * v_2_2 + softmax_3_3 * v_3_2 + softmax_3_4 * v_4_2 + softmax_3_5 * v_5_2 + softmax_3_6 * v_6_2 + softmax_3_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_4_0 = (softmax_4_0 * v_0_0 + softmax_4_1 * v_1_0 + softmax_4_2 * v_2_0 + softmax_4_3 * v_3_0 + softmax_4_4 * v_4_0 + softmax_4_5 * v_5_0 + softmax_4_6 * v_6_0 + softmax_4_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_4_1 = (softmax_4_0 * v_0_1 + softmax_4_1 * v_1_1 + softmax_4_2 * v_2_1 + softmax_4_3 * v_3_1 + softmax_4_4 * v_4_1 + softmax_4_5 * v_5_1 + softmax_4_6 * v_6_1 + softmax_4_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_4_2 = (softmax_4_0 * v_0_2 + softmax_4_1 * v_1_2 + softmax_4_2 * v_2_2 + softmax_4_3 * v_3_2 + softmax_4_4 * v_4_2 + softmax_4_5 * v_5_2 + softmax_4_6 * v_6_2 + softmax_4_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_5_0 = (softmax_5_0 * v_0_0 + softmax_5_1 * v_1_0 + softmax_5_2 * v_2_0 + softmax_5_3 * v_3_0 + softmax_5_4 * v_4_0 + softmax_5_5 * v_5_0 + softmax_5_6 * v_6_0 + softmax_5_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_5_1 = (softmax_5_0 * v_0_1 + softmax_5_1 * v_1_1 + softmax_5_2 * v_2_1 + softmax_5_3 * v_3_1 + softmax_5_4 * v_4_1 + softmax_5_5 * v_5_1 + softmax_5_6 * v_6_1 + softmax_5_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_5_2 = (softmax_5_0 * v_0_2 + softmax_5_1 * v_1_2 + softmax_5_2 * v_2_2 + softmax_5_3 * v_3_2 + softmax_5_4 * v_4_2 + softmax_5_5 * v_5_2 + softmax_5_6 * v_6_2 + softmax_5_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_6_0 = (softmax_6_0 * v_0_0 + softmax_6_1 * v_1_0 + softmax_6_2 * v_2_0 + softmax_6_3 * v_3_0 + softmax_6_4 * v_4_0 + softmax_6_5 * v_5_0 + softmax_6_6 * v_6_0 + softmax_6_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_6_1 = (softmax_6_0 * v_0_1 + softmax_6_1 * v_1_1 + softmax_6_2 * v_2_1 + softmax_6_3 * v_3_1 + softmax_6_4 * v_4_1 + softmax_6_5 * v_5_1 + softmax_6_6 * v_6_1 + softmax_6_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_6_2 = (softmax_6_0 * v_0_2 + softmax_6_1 * v_1_2 + softmax_6_2 * v_2_2 + softmax_6_3 * v_3_2 + softmax_6_4 * v_4_2 + softmax_6_5 * v_5_2 + softmax_6_6 * v_6_2 + softmax_6_7 * v_7_2)[23:8];
        hdr.s1_output0_calc.s1_output_7_0 = (softmax_7_0 * v_0_0 + softmax_7_1 * v_1_0 + softmax_7_2 * v_2_0 + softmax_7_3 * v_3_0 + softmax_7_4 * v_4_0 + softmax_7_5 * v_5_0 + softmax_7_6 * v_6_0 + softmax_7_7 * v_7_0)[23:8];
        hdr.s1_output0_calc.s1_output_7_1 = (softmax_7_0 * v_0_1 + softmax_7_1 * v_1_1 + softmax_7_2 * v_2_1 + softmax_7_3 * v_3_1 + softmax_7_4 * v_4_1 + softmax_7_5 * v_5_1 + softmax_7_6 * v_6_1 + softmax_7_7 * v_7_1)[23:8];
        hdr.s1_output0_calc.s1_output_7_2 = (softmax_7_0 * v_0_2 + softmax_7_1 * v_1_2 + softmax_7_2 * v_2_2 + softmax_7_3 * v_3_2 + softmax_7_4 * v_4_2 + softmax_7_5 * v_5_2 + softmax_7_6 * v_6_2 + softmax_7_7 * v_7_2)[23:8];
                
        hdr.s1_output0_calc.s1_output_0_3 = 0;
        hdr.s1_output0_calc.s1_output_0_4 = 0;
        hdr.s1_output0_calc.s1_output_0_5 = 0;
        hdr.s1_output0_calc.s1_output_1_3 = 0;
        hdr.s1_output0_calc.s1_output_1_4 = 0;
        hdr.s1_output0_calc.s1_output_1_5 = 0;
        hdr.s1_output0_calc.s1_output_2_3 = 0;
        hdr.s1_output0_calc.s1_output_2_4 = 0;
        hdr.s1_output0_calc.s1_output_2_5 = 0;
        hdr.s1_output0_calc.s1_output_3_3 = 0;
        hdr.s1_output0_calc.s1_output_3_4 = 0;
        hdr.s1_output0_calc.s1_output_3_5 = 0;
        hdr.s1_output0_calc.s1_output_4_3 = 0;
        hdr.s1_output0_calc.s1_output_4_4 = 0;
        hdr.s1_output0_calc.s1_output_4_5 = 0;
        hdr.s1_output0_calc.s1_output_5_3 = 0;
        hdr.s1_output0_calc.s1_output_5_4 = 0;
        hdr.s1_output0_calc.s1_output_5_5 = 0;
        hdr.s1_output0_calc.s1_output_6_3 = 0;
        hdr.s1_output0_calc.s1_output_6_4 = 0;
        hdr.s1_output0_calc.s1_output_6_5 = 0;
        hdr.s1_output0_calc.s1_output_7_3 = 0;
        hdr.s1_output0_calc.s1_output_7_4 = 0;
        hdr.s1_output0_calc.s1_output_7_5 = 0;
       
        hdr.p4calc.s1_replication = replication;
        standard_metadata.egress_spec = 2;
    }

    // 丢弃
    action operation_drop() {
        mark_to_drop(standard_metadata);
    }

    // 下面8个表求倒数
    action operation_cal_softmax_sum_reciprocal_0(bit<32> softmax_reciprocal_0) {
        meta.softmax_reciprocal_0 = softmax_reciprocal_0;
    }

    table table_softmax_sum_reciprocal_0 {
        key = {
            meta.softmax_sum_0 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_0;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_1(bit<32> softmax_reciprocal_1) {
        meta.softmax_reciprocal_1 = softmax_reciprocal_1;
    }

    table table_softmax_sum_reciprocal_1 {
        key = {
            meta.softmax_sum_1 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_1;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_2(bit<32> softmax_reciprocal_2) {
        meta.softmax_reciprocal_2 = softmax_reciprocal_2;
    }

    table table_softmax_sum_reciprocal_2 {
        key = {
            meta.softmax_sum_2 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_2;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_3(bit<32> softmax_reciprocal_3) {
        meta.softmax_reciprocal_3 = softmax_reciprocal_3;
    }

    table table_softmax_sum_reciprocal_3 {
        key = {
            meta.softmax_sum_3 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_3;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_4(bit<32> softmax_reciprocal_4) {
        meta.softmax_reciprocal_4 = softmax_reciprocal_4;
    }

    table table_softmax_sum_reciprocal_4 {
        key = {
            meta.softmax_sum_4 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_4;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_5(bit<32> softmax_reciprocal_5) {
        meta.softmax_reciprocal_5 = softmax_reciprocal_5;
    }

    table table_softmax_sum_reciprocal_5 {
        key = {
            meta.softmax_sum_5 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_5;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_6(bit<32> softmax_reciprocal_6) {
        meta.softmax_reciprocal_6 = softmax_reciprocal_6;
    }

    table table_softmax_sum_reciprocal_6 {
        key = {
            meta.softmax_sum_6 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_6;
        }
        default_action = operation_drop();
        size = 256;
    }

    action operation_cal_softmax_sum_reciprocal_7(bit<32> softmax_reciprocal_7) {
        meta.softmax_reciprocal_7 = softmax_reciprocal_7;
    }

    table table_softmax_sum_reciprocal_7 {
        key = {
            meta.softmax_sum_7 : ternary; 
        }
        actions = {
            operation_drop;
            operation_cal_softmax_sum_reciprocal_7;
        }
        default_action = operation_drop();
        size = 256;
    }

    apply {
        if (hdr.p4calc.isValid()) {
            // 计算q*k_t
            calc_qk();
            store_exp_result();

            cal_softmax1();
            table_softmax_sum_reciprocal_0.apply();
            table_softmax_sum_reciprocal_1.apply();
            table_softmax_sum_reciprocal_2.apply();
            table_softmax_sum_reciprocal_3.apply();
            table_softmax_sum_reciprocal_4.apply();
            table_softmax_sum_reciprocal_5.apply();
            table_softmax_sum_reciprocal_6.apply();
            table_softmax_sum_reciprocal_7.apply();

            cal_softmax2();
            operation_send();
        } else {
            operation_drop();
        }
    }
}

/*************************************************************************
 ****************  E G R E S S   P R O C E S S I N G   *******************
 *************************************************************************/
control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply { }
}

/*************************************************************************
 *************   C H E C K S U M    C O M P U T A T I O N   **************
 *************************************************************************/

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

/*************************************************************************
 ***********************  D E P A R S E R  *******************************
 *************************************************************************/
control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ptp);
        packet.emit(hdr.p4calc);
        packet.emit(hdr.s0_output0_calc);
        packet.emit(hdr.s1_output0_calc);
        packet.emit(hdr.s7_output0_calc);
    }
}

/*************************************************************************
 ***********************  S W I T T C H **********************************
 *************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;